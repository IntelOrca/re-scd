.version 2
init
{
    init_00()
    {
        door_aot_se(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -4748, -8646, 2400, 3900, -5146, -7200, -5988, 136, 3, 9, 0, 4, 22, 4, 0, 0, UNLOCKED, 0);
        door_aot_se(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, 2112, -22556, 6100, 1500, 4451, -1800, -22484, 1128, 3, 10, 10, 1, 43, 0, 0, 0, UNLOCKED, 0);
        return 0;
    }
}

main
{
    main_00()
    {
        if (arr[32] == 14)
        {
            bits[30][0] = 1;
            rbj_reset();
            if (game.scenario == 1)
            {
                if (bits[29][3] == 1)
                {
                    evt_exec(255, I_GOSUB, main_0B);
                    door_aot_se(2, SCE_DOOR, SAT_EM | SAT_UNDER, 1, 0, 25000, 25000, 2700, 1800, -12909, 0, -12542, 2040, 3, 4, 4, 0, 54, 0, 0, 0, UNLOCKED, 0);
                    aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_0F, 0, 0);
                }
                else
                {
                    evt_exec(255, I_GOSUB, main_0A);
                    door_aot_se(2, SCE_DOOR, SAT_EM | SAT_UNDER, 1, 0, 25000, 25000, 2700, 1800, -12909, 0, -12542, 2040, 3, 4, 4, 0, 32, 0, 0, 0, UNLOCKED, 0);
                    aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_0F, 0, 0);
                }
            }
            else
            {
                evt_exec(255, I_GOSUB, main_0A);
                door_aot_se(2, SCE_DOOR, SAT_EM | SAT_UNDER, 1, 0, 25000, 25000, 2700, 1800, -12909, 0, -12542, 2040, 3, 4, 4, 0, 32, 0, 0, 0, UNLOCKED, 0);
                aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_0F, 0, 0);
            }
        }
        else
        {
            bits[30][2] = 1;
            rbj_reset();
            if (bits[4][52] == 0)
            {
                sce_em_set(0, 255, ENEMY_ADAWONG1, 0, 64, 0, 0, 0, 255, -1269, -1800, -7849, 392, 0, 0);
                sce_em_set(0, 0, ENEMY_LEONKENNEDYBANDAGED, 0, 0, 1, 0, 0, 255, 20000, 20000, 20000, -3496, 0, 0);
                if (game.scenario == 1 && bits[29][3] == 1)
                {
                    if (bits[3][37] == 0)
                    {
                        bits[3][37] = 1;
                        evt_exec(255, I_GOSUB, main_02);
                    }
                }
                aot_set(2, SCE_EVENT, SAT_PL | SAT_UNDER, 1, 0, -1326, -9059, 3500, 2900, 255, 0, I_GOSUB, main_06, 0, 0);
                evt_exec(255, I_GOSUB, main_08);
            }
            else
            {
                if (bits[1][3] == 1)
                {
                    if (game.last_room == 0x409)
                    {
                        sce_em_set(0, 255, ENEMY_ADAWONG1, 0, 4, 1, 31, 0, 255, -1040, -1800, -7058, -3496, 0, 0);
                    }
                    else
                    {
                        sce_em_set(0, 255, ENEMY_ADAWONG1, 0, 4, 0, 31, 0, 255, 5172, 0, -21308, -1216, 0, 0);
                    }
                }
                aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_0F, 0, 0);
            }
        }
        mizu_div_set(2);
        obj_model_set(0, 1, 130, 4, 4, 0, 0, 10, 26, -3600, -1440, -21600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aot_set(3, SCE_WATER, SAT_PL | SAT_EM | SAT_OB | SAT_UNDER, 0, 0, -2687, -21529, 14600, 12500, 96, 250, 0, 0, 0, 0);
        item_aot_set(6, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, 593, -15432, 1800, 2400, ITEM_FAIDSPRAY, 1, 180, 255, 0);
        item_aot_set(7, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, 6293, -17432, 1800, 2400, ITEM_INKRIBBON, 3, 181, 255, 0);
        evt_exec(255, I_GOSUB, main_12);
        main_10();
        main_11();
        return 0;
    }

    main_01()
    {
        return 0;
    }

    main_02()
    {
        evt_next();
        game.cutscene = 1;
        bits[2][7] = 1;
        evt_exec(255, I_GOSUB, main_03);
        cut_chg(2);
        sleep(10, 60);
        cut_chg(1);
        sleep(10, 20);
        xa_vol(80);
        xa_on(0, 32);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(2);
        cut_auto(1);
        game.cutscene = 0;
        bits[2][7] = 0;
        return 0;
    }

    main_03()
    {
        work_set(WK_PLAYER, 0);
        pos_set(0, 3732, 0, -19807);
        member_set(15, 216, 11);
        member_set(17, 0, 0);
        sleep(10, 60);
        sleep(10, 20);
        plc_motion(0, 21, 64);
        sleep(10, 1);
        plc_flg(1, 65);
        plc_neck(5, 2, 0, 0, 60, 60);
        sleep(10, 26);
        plc_motion(0, 21, 193);
        sleep(10, 20);
        plc_ret();
        return 0;
    }

    main_04()
    {
        evt_next();
        work_set(WK_OBJECT, 1);

off_1488:
        speed_set(7, 1);
        for 5 times
        {
            speed_set(9, -1);
            add_speed();
            add_aspeed();
            sleep(10, 2);
            speed_set(9, 0);
            add_speed();
            add_aspeed();
            sleep(10, 2);
        }
        speed_set(7, -1);
        for 10 times
        {
            speed_set(9, 1);
            add_speed();
            add_aspeed();
            sleep(10, 2);
            speed_set(9, 0);
            add_speed();
            add_aspeed();
            sleep(10, 2);
        }
        speed_set(7, 1);
        for 5 times
        {
            speed_set(9, -1);
            add_speed();
            add_aspeed();
            sleep(10, 2);
            speed_set(9, 0);
            add_speed();
            add_aspeed();
            sleep(10, 2);
        }
        goto off_1488;
        return 0;
    }

    main_05()
    {
        evt_next();
        work_set(WK_OBJECT, 1);

off_14F4:
        speed_set(7, 1);
        for 5 times
        {
            speed_set(9, -1);
            add_speed();
            add_aspeed();
            sleep(10, 2);
            speed_set(9, 0);
            add_speed();
            add_aspeed();
            sleep(10, 2);
        }
        speed_set(7, -1);
        for 10 times
        {
            speed_set(9, 1);
            add_speed();
            add_aspeed();
            sleep(10, 2);
            speed_set(9, 0);
            add_speed();
            add_aspeed();
            sleep(10, 2);
        }
        speed_set(7, 1);
        for 5 times
        {
            speed_set(9, -1);
            add_speed();
            add_aspeed();
            sleep(10, 2);
            speed_set(9, 0);
            add_speed();
            add_aspeed();
            sleep(10, 2);
        }
        goto off_14F4;
        return 0;
    }

    main_06()
    {
        aot_reset(2, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        game.cutscene = 1;
        bits[2][7] = 1;
        sleep(10, 25);
        sce_bgm_control(1, 1, 0, 100, 64);
        sce_bgmtbl_set(0, 16, 4, 65300, 0);
        bits[5][8] = 1;
        bits[4][52] = 1;
        evt_exec(255, I_GOSUB, main_07);
        evt_exec(255, I_GOSUB, main_09);
        cut_chg(7);
        sleep(10, 25);
        message_on(0, 0, 0, 0, 0);
        xa_on(0, 33);
        wsleep();
        wsleeping();
        message_on(0, 1, 0, 0, 0);
        xa_on(0, 34);
        wsleep();
        wsleeping();
        message_on(0, 2, 0, 0, 0);
        xa_on(0, 35);
        bits[5][6] = 1;
        wsleep();
        wsleeping();
        sce_fade_set(2, 2, 7, 0, 4);
        sleep(10, 31);
        sce_fade_adjust(2, 255, 127);
        xa_on(0, 41);
        evt_next();
        for 10 times
        {
            sce_fade_adjust(2, 255, 127);
            evt_next();
        }
        while (
        {
            sce_fade_adjust(2, 255, 127);
            evt_next();
        }
        for 10 times
        {
            sce_fade_adjust(2, 255, 127);
            evt_next();
        }
        sce_fade_set(2, 2, 7, 0, 244);
        bits[5][2] = 1;
        sleep(10, 31);
        bits[5][3] = 1;
        unk(131);
        message_on(0, 3, 0, 0, 0);
        xa_on(0, 36);
        bits[5][6] = 1;
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(6);
        sleep(10, 2);
        message_on(0, 4, 0, 0, 0);
        xa_on(0, 37);
        bits[5][5] = 1;
        wsleep();
        wsleeping();
        sleep(10, 120);
        message_on(0, 5, 0, 0, 0);
        xa_on(0, 38);
        bits[5][6] = 1;
        wsleep();
        wsleeping();
        message_on(0, 6, 0, 0, 0);
        xa_on(0, 39);
        bits[5][5] = 1;
        wsleep();
        wsleeping();
        sleep(10, 45);
        message_on(0, 7, 0, 0, 0);
        xa_on(0, 40);
        bits[5][6] = 1;
        wsleep();
        wsleeping();
        sleep(10, 30);
        game.cutscene = 0;
        bits[2][7] = 1;
        if (arr[32] == 0)
        {
            save(32, 4);
        }
        else
        {
            if (arr[32] == 2)
            {
                save(32, 6);
            }
        }
        unk(137);
        aot_on(0);
        bits[1][3] = 1;
        bits[5][8] = 0;
        return 0;
    }

    main_07()
    {
        work_set(WK_PLAYER, 0);
        pos_set(0, 525, -1800, -7655);
        member_set(15, 8, 248);
        plc_motion(0, 15, 0);
        sleep(10, 55);
        plc_motion(0, 20, 16);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, -200, 100, 25, 10);
        sleep(10, 8);
        plc_motion(0, 20, 144);
        plc_cnt(4);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, -200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, -200, 100, 25, 10);
        sleep(10, 8);
        plc_motion(0, 17, 20);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 8);
        sleep(10, 120);
        while (
        {
            evt_next();
        }
        pos_set(0, 20000, 20000, 20000);
        return 0;
    }

    main_08()
    {
        work_set(WK_ENEMY, 0);
        evt_next();
        plc_motion(0, 17, 20);
        while (
        {
            evt_next();
        }
        pos_set(0, 525, -1800, -7655);
        member_set(15, 8, 248);
        while (
        {
            evt_next();
        }
        sleep(10, 25);
        plc_motion(0, 18, 152);
        sleep(10, 25);
        main_0E();
        plc_motion(0, 19, 16);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, -200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, -200, 100, 25, 10);
        plc_motion(0, 19, 144);
        plc_cnt(8);
        sleep(10, 8);
        plc_neck(5, 2, 0, 0, 8, 10);
        sleep(10, 8);
        sleep(10, 30);
        sleep(10, 12);
        plc_motion(0, 22, 0);
        sleep(10, 12);
        main_0E();
        plc_neck(2, 0, -20, -80, 8, 20);
        sleep(10, 35);
        plc_neck(5, 2, 0, 0, 8, 10);
        sleep(10, 300);
        plc_dest(0, 4, 4, -5530, -7600);
        while (
        {
            evt_next();
        }
        return 0;
    }

    main_09()
    {
        work_set(WK_SPLAYER, 0);
        pos_set(0, -835, -1800, -7655);
        member_set(15, 184, 255);
        sleep(10, 20);
        plc_motion(0, 20, 0);
        sleep(10, 18);
        plc_motion(0, 20, 192);
        plc_cnt(2);
        sleep(10, 20);
        plc_motion(0, 18, 64);
        sleep(10, 25);
        plc_motion(0, 15, 0);
        sleep(10, 60);
        main_0D();
        plc_motion(0, 16, 0);
        sleep(10, 20);
        plc_motion(0, 16, 144);
        sleep(10, 16);
        plc_neck(2, 0, 100, 150, 80, 80);
        plc_motion(0, 16, 16);
        plc_cnt(12);
        sleep(10, 16);
        plc_motion(0, 16, 144);
        sleep(10, 24);
        plc_neck(2, 0, -100, 50, 80, 80);
        plc_motion(0, 16, 16);
        plc_cnt(12);
        sleep(10, 16);
        plc_motion(0, 16, 128);
        sleep(10, 20);
        plc_neck(5, 1, 0, 0, 80, 80);
        plc_motion(0, 17, 20);
        sleep(10, 50);
        while (
        {
            evt_next();
        }
        sleep(10, 10);
        plc_neck(5, 3, 0, 0, 80, 80);
        plc_motion(0, 18, 128);
        sleep(10, 26);
        main_0D();
        plc_neck(2, 0, 40, -80, 10, 10);
        main_0D();
        plc_neck(5, 3, 0, 0, 80, 80);
        sleep(10, 30);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, -200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 8);
        plc_neck(2, 0, -200, 100, 25, 10);
        sleep(10, 8);
        main_0D();
        sleep(10, 30);
        plc_motion(0, 19, 16);
        sleep(10, 40);
        plc_motion(0, 19, 128);
        plc_cnt(10);
        sleep(10, 20);
        sleep(10, 10);
        plc_neck(2, 0, -500, 0, 25, 10);
        sleep(10, 10);
        bits[5][0] = 0;
        plc_motion(0, 21, 0);
        plc_rot(1, 2048);
        sleep(10, 40);
        return 0;
    }

    main_0A()
    {
        bits[2][7] = 1;
        game.cutscene = 1;
        sce_bgmtbl_set(0, 16, 4, 5396, 49152);
        work_set(WK_PLAYER, 0);
        plc_dest(0, 4, 0, -253, -7842);
        sleep(10, 10);
        evt_exec(255, I_GOSUB, main_0C);
        se_on(2, 282, 0, 2904, -1800, -13806);
        while (
        {
            evt_next();
        }
        bits[5][0] = 0;
        cut_chg(6);
        sleep(10, 25);
        plc_neck(2, 0, 300, 60, 20, 4);
        sce_bgm_control(1, 1, 0, 100, 64);
        sleep(10, 30);
        plc_dest(0, 21, 0, -3456, 128);
        while (
        {
            evt_next();
        }
        bits[5][1] = 1;
        sleep(10, 20);
        plc_neck(2, 0, 240, -20, 80, 2);
        sleep(10, 5);
        plc_neck(2, 0, -240, -20, 80, 2);
        sleep(10, 5);
        nop_8a(0, 3, 0, 0, 0);
        nop_8b(110, 1, 0, 0, 0);
        nop_8b(180, 8, 0, 1, 0);
        se_on(2, 284, 0, -201, -1800, -10402);
        plc_neck(2, 0, 240, -20, 80, 2);
        sleep(10, 2);
        plc_motion(0, 15, 72);
        sleep(10, 3);
        plc_neck(2, 0, -240, -20, 80, 2);
        sleep(10, 10);
        if (bits[8][63] == 0)
        {
            save(32, 0);
        }
        else
        {
            save(32, 2);
        }
        evt_next();
        aot_on(2);
        game.cutscene = 0;
        bits[2][7] = 0;
        return 0;
    }

    main_0B()
    {
        bits[2][7] = 1;
        game.cutscene = 1;
        sce_bgmtbl_set(0, 16, 4, 5396, 49152);
        work_set(WK_PLAYER, 0);
        plc_dest(0, 4, 0, -253, -7842);
        while (
        {
            evt_next();
        }
        bits[5][0] = 0;
        cut_chg(6);
        plc_neck(2, 0, 400, -40, 8, 2);
        sleep(10, 40);
        plc_neck(2, 0, 200, -60, 8, 2);
        sleep(10, 60);
        if (bits[8][63] == 0)
        {
            save(32, 0);
        }
        else
        {
            save(32, 2);
        }
        evt_next();
        aot_on(2);
        game.cutscene = 0;
        bits[2][7] = 0;
        return 0;
    }

    main_0C()
    {
        sce_espr_on(0, 26, 0, 6144, 3871, -1700, -14176, 1024);
        sce_espr_on(0, 26, 0, 6144, 5242, -1700, -13094, 1024);
        while (
        {
            sce_espr_on(0, 26, 0, 6144, 4910, -1700, -13042, 1024);
            sleep(10, 1);
            sce_espr_on(0, 26, 0, 6144, 4010, -1700, -13032, 1024);
            sleep(10, 1);
            sce_espr_on(0, 26, 0, 6144, 4510, -1700, -12832, 1024);
            sleep(10, 2);
        }
        sleep(10, 30);
        evt_next();
        sce_espr_on(0, 26, 0, 6144, 438, -1700, -9922, 1024);
        sce_espr_on(0, 26, 0, 6144, 338, -1700, -9902, 1536);
        evt_next();
        sce_espr_on(0, 26, 0, 6144, 638, -1700, -9982, 512);
        sce_espr_on(0, 26, 0, 6144, 565, -1700, -9952, 1024);
        evt_next();
        sce_espr_on(0, 26, 0, 6144, 465, -1700, -9932, 1536);
        sce_espr_on(0, 26, 0, 6144, 665, -1700, -9912, 512);
        return 0;
    }

    main_0D()
    {
        while (
        {
            evt_next();
        }
        bits[5][6] = 0;
        return 0;
    }

    main_0E()
    {
        while (
        {
            evt_next();
        }
        bits[5][5] = 0;
        return 0;
    }

    main_0F()
    {
        message_on(0, 15, 0, 0, 255);
        evt_next();
        if (input.question == 0)
        {
            se_on(4, 6, 0, 0, 0, 0);
            aot_reset(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 230, 235, 224, 227, 156, 232);
            aot_on(0);
            evt_next();
            aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_0F, 0, 0);
        }
        else
        {
            se_on(4, 5, 0, 0, 0, 0);
        }
        return 0;
    }

    main_10()
    {
        item_aot_set(4, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -6567, 1910, 1000, 1000, ITEM_INKRIBBON, 3, 255, 255, 0);
        item_aot_set(6, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -6567, 1910, 1000, 1000, ITEM_FAIDSPRAY, 1, 255, 255, 0);
        return 0;
    }

    main_11()
    {
        aot_set_4p(30, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -2723, -9858, 477, -9858, 3477, -17058, -1823, -27458, 13, 0, 0, 0, 0, 255);
        aot_set_4p(31, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, 5697, -9358, 10697, -9358, 11187, -23258, 7277, -20478, 13, 0, 0, 0, 0, 255);
        return 0;
    }

    main_12()
    {

off_1C72:
        switch (var_1A)
        {
        case 0:
            sce_bgm_control(0, 0, 1, 81, 65);
            break;
        case 1:
            sce_bgm_control(0, 0, 1, 91, 65);
            break;
        case 2:
            sce_bgm_control(0, 0, 1, 86, 65);
            break;
        case 3:
            sce_bgm_control(0, 0, 1, 91, 65);
            break;
        case 4:
            if (bits[5][8] == 0)
            {
                sce_bgm_control(0, 0, 1, 91, 65);
            }
            else
            {
                sce_bgm_control(0, 0, 1, 1, 65);
            }
            break;
        case 5:
            sce_bgm_control(0, 0, 1, 91, 65);
            break;
        case 6:
            if (bits[5][8] == 0)
            {
                sce_bgm_control(0, 0, 1, 91, 65);
            }
            else
            {
                sce_bgm_control(0, 0, 1, 1, 65);
            }
            break;
        case 7:
            if (bits[5][8] == 0)
            {
                sce_bgm_control(0, 0, 1, 91, 65);
            }
            else
            {
                sce_bgm_control(0, 0, 1, 1, 65);
            }
            break;
        }
        do
        {
            evt_next();
        } while (bits[1][11] == 0);
        goto off_1C72;
        return 0;
    }
}
