.version 2
init
{
    init_00()
    {
        door_aot_se(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, 20000, 20000, 0, 0, -703, 0, -17020, 816, 0, 7, 3, 0, 14, 5, 0, 0, UNLOCKED, 0);
        door_aot_se(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -11422, -18315, 1800, 1800, -4696, 0, -1380, 560, 0, 9, 0, 0, 7, 1, 0, 0, UNLOCKED, 0);
        aot_set(2, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -21840, -21955, 1350, 1620, 0, 0, 0, 0, 0, 255);
        aot_set(3, SCE_FLAG_CHG, SAT_PL | SAT_FRONT, 0, 0, -21840, -21955, 1350, 1620, 10, 0, 50, 0, 1, 0);
        aot_set(4, SCE_STATUS, SAT_PL | SAT_MANUAL | SAT_UNDER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aot_set_4p(12, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -25794, -15338, -25280, -5800, -16240, -3500, -22990, -20090, 2, 0, 0, 0, 0, 255);
        return 0;
    }
}

main
{
    main_00()
    {
        if (game.scenario == 1)
        {
            if (game.last_room == 0x107)
            {
                if (bits[4][179] == 0)
                {
                    bits[5][5] = 1;
                    evt_exec(255, I_GOSUB, main_02);
                }
            }
            if (bits[4][0] == 1)
            {
                if (bits[4][181] == 0)
                {
                    aot_reset(1, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_0E, 0, 0);
                }
            }
        }
        if (bits[4][0] == 0)
        {
            obj_model_set(0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0);
            aot_set(6, SCE_DAMAGE, SAT_PL | SAT_UNDER, 0, 0, -20961, -17944, 1800, 1800, 0, 0, 0, 0, 0, 0);
            aot_set(7, SCE_DAMAGE, SAT_PL | SAT_UNDER, 0, 0, -21787, -19536, 1800, 1800, 0, 0, 0, 0, 0, 0);
            aot_set(8, SCE_DAMAGE, SAT_PL | SAT_UNDER, 0, 0, -20851, -18867, 1800, 1800, 0, 0, 0, 0, 0, 0);
            aot_set(9, SCE_DAMAGE, SAT_PL | SAT_UNDER, 0, 0, -20558, -17337, 1800, 1800, 0, 0, 0, 0, 0, 0);
            aot_set(10, SCE_DAMAGE, SAT_PL | SAT_UNDER, 0, 0, -20944, -16400, 1800, 1800, 0, 0, 0, 0, 0, 0);
            evt_exec(255, I_GOSUB, main_0F);
        }
        else
        {
            aot_reset(2, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, 0, 0, 0, 255);
            aot_reset(3, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
            sca_id_set(9, 0, 0);
            sca_id_set(16, 0, 0);
            cut_be_set(5, 1, 0);
            cut_be_set(0, 2, 1);
            cut_be_set(4, 3, 1);
        }
        aot_set(11, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -5530, -4687, 1800, 1100, 255, 0, I_GOSUB, main_0D, 0, 0);
        if (game.difficult == 1)
        {
            if (game.scenario == 0)
            {
                item_aot_set_4p(5, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -25048, -17910, -24130, -15260, -21500, -16600, -22610, -19310, ITEM_HANDGUNAMMO, 15, 213, 255, 0);
            }
            else
            {
                if (game.player == 0)
                {
                    item_aot_set_4p(5, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -25048, -17910, -24130, -15260, -21500, -16600, -22610, -19310, ITEM_SHOTGUNAMMO, 7, 213, 255, 0);
                }
                else
                {
                    item_aot_set_4p(5, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -25048, -17910, -24130, -15260, -21500, -16600, -22610, -19310, ITEM_ACIDROUNDS, 6, 213, 255, 0);
                }
            }
        }
        evt_exec(255, I_GOSUB, main_03);
        return 0;
    }

    main_01()
    {
        if (bits[4][0] == 0)
        {
            if (arr[2] == 50)
            {
                evt_exec(255, I_GOSUB, main_06);
            }
            switch (var_1A)
            {
            case 3:
                if (bits[5][0] == 0)
                {
                    bits[5][0] = 1;
                    evt_exec(255, I_GOSUB, main_04);
                }
                break;
            case 6:
                if (bits[5][0] == 0)
                {
                    bits[5][0] = 1;
                    evt_exec(255, I_GOSUB, main_04);
                }
                break;
            }
        }
        else
        {
            switch (var_1A)
            {
            case 3:
                if (bits[5][0] == 0)
                {
                    bits[5][0] = 1;
                    evt_exec(255, I_GOSUB, main_05);
                }
                break;
            case 6:
                if (bits[5][0] == 0)
                {
                    bits[5][0] = 1;
                    evt_exec(255, I_GOSUB, main_05);
                }
                break;
            }
        }
        return 0;
    }

    main_02()
    {
        bits[4][179] = 1;
        bits[1][9] = 1;
        bits[2][7] = 1;
        evt_next();
        sce_bgm_control(0, 0, 1, 1, 49);
        sce_bgm_control(0, 0, 2, 1, 64);
        sce_bgm_control(0, 0, 3, 1, 35);
        sce_bgm_control(0, 0, 4, 1, 50);
        sce_bgm_control(0, 4, 0, 1, 65);
        sce_fade_set(2, 2, 7, 0, 254);
        movie_on(8);
        sce_fade_adjust(2, 255, 127);
        evt_next();
        bits[5][5] = 0;
        sleep(10, 63);
        sce_bgm_control(0, 3, 0, 128, 65);
        bits[2][7] = 0;
        return 0;
    }

    main_03()
    {
        evt_next();
        while (
        {
            evt_next();
        }
        if (bits[4][0] == 0)
        {
            switch (var_1A)
            {
            case 0:
                sce_bgm_control(0, 0, 1, 73, 49);
                sce_bgm_control(0, 0, 2, 58, 64);
                sce_bgm_control(0, 0, 3, 30, 35);
                sce_bgm_control(0, 0, 4, 10, 50);
                break;
            case 1:
                sce_bgm_control(0, 0, 1, 93, 49);
                sce_bgm_control(0, 0, 2, 50, 80);
                sce_bgm_control(0, 0, 3, 30, 100);
                sce_bgm_control(0, 0, 4, 15, 30);
                break;
            case 2:
                sce_bgm_control(0, 0, 1, 102, 70);
                sce_bgm_control(0, 0, 2, 60, 80);
                sce_bgm_control(0, 0, 3, 30, 64);
                sce_bgm_control(0, 0, 4, 10, 3);
                break;
            case 3:
                sce_bgm_control(0, 0, 1, 110, 64);
                sce_bgm_control(0, 0, 2, 60, 80);
                sce_bgm_control(0, 0, 3, 30, 127);
                sce_bgm_control(0, 0, 4, 10, 3);
                break;
            case 4:
                sce_bgm_control(0, 0, 1, 111, 125);
                sce_bgm_control(0, 0, 2, 70, 80);
                sce_bgm_control(0, 0, 3, 30, 34);
                sce_bgm_control(0, 0, 4, 10, 3);
                break;
            case 5:
                sce_bgm_control(0, 0, 1, 98, 77);
                sce_bgm_control(0, 0, 2, 60, 80);
                sce_bgm_control(0, 0, 3, 30, 34);
                sce_bgm_control(0, 0, 4, 10, 3);
                break;
            case 6:
                sce_bgm_control(0, 0, 1, 127, 85);
                sce_bgm_control(0, 0, 2, 60, 80);
                sce_bgm_control(0, 0, 3, 30, 34);
                sce_bgm_control(0, 0, 4, 10, 3);
                break;
            }
        }
        else
        {
            sce_bgm_control(0, 0, 1, 1, 0);
            sce_bgm_control(0, 0, 4, 1, 0);
            switch (var_1A)
            {
            case 9:
                sce_bgm_control(0, 0, 2, 58, 64);
                sce_bgm_control(0, 0, 3, 30, 35);
                break;
            case 10:
                sce_bgm_control(0, 0, 2, 50, 80);
                sce_bgm_control(0, 0, 3, 30, 100);
                break;
            case 11:
                sce_bgm_control(0, 0, 2, 60, 80);
                sce_bgm_control(0, 0, 3, 30, 64);
                break;
            case 12:
                sce_bgm_control(0, 0, 2, 60, 80);
                sce_bgm_control(0, 0, 3, 30, 127);
                break;
            case 13:
                sce_bgm_control(0, 0, 2, 70, 80);
                sce_bgm_control(0, 0, 3, 30, 34);
                break;
            case 14:
                sce_bgm_control(0, 0, 2, 75, 80);
                sce_bgm_control(0, 0, 3, 30, 34);
                break;
            case 15:
                sce_bgm_control(0, 0, 2, 60, 80);
                sce_bgm_control(0, 0, 3, 30, 34);
                break;
            }
        }
        do
        {
            evt_next();
        } while (bits[1][11] == 0);
        goto off_1C7C;
        return 0;
    }

    main_04()
    {
        light_kido_set(1, 8600);
        for 3 times
        {
            evt_next();
        }
        light_kido_set(1, 12000);
        evt_next();
        light_kido_set(1, 10000);
        for 2 times
        {
            evt_next();
        }
        bits[5][0] = 0;
        return 0;
    }

    main_05()
    {
        light_kido_set(1, 0);
        bits[5][0] = 0;
        return 0;
    }

    main_06()
    {
        bits[5][1] = 0;
        evt_exec(255, I_GOSUB, main_07);
        aot_reset(3, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        do
        {
            sleep(10, 1);
        } while (bits[5][1] == 0);
        return 0;
    }

    main_07()
    {
        bits[2][7] = 1;
        game.cutscene = 1;
        aot_reset(2, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_reset(6, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_reset(7, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_reset(8, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_reset(9, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_reset(10, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        evt_next();
        bits[5][2] = 0;
        evt_exec(255, I_GOSUB, main_08);
        bits[5][3] = 0;
        evt_exec(255, I_GOSUB, main_09);
        sleep(10, 10);
        sca_id_set(9, 0, 0);
        sca_id_set(16, 0, 0);
        sleep(10, 10);
        do
        {
            evt_next();
        } while (bits[5][2] == 0);
        cut_chg(5);
        sleep(10, 90);
        nop_8a(0, 5, 0, 0, 0);
        nop_8a(0, 5, 0, 10, 0);
        nop_8c(0, 200, 240, 15, 0, 0, 0);
        se_on(2, 267, 0, -18762, -2800, -21034);
        sce_bgm_control(1, 1, 1, 80, 64);
        sce_espr_on(0, 4378, 0, 8192, -27100, -11900, -20000, 0);
        sleep(10, 7);
        sce_espr_on(0, 4378, 0, 8192, -27100, -11900, -20000, 0);
        sleep(10, 3);
        sce_espr_on(0, 4378, 0, 8704, -27100, -11700, -19600, 0);
        sleep(10, 2);
        sce_espr_on(0, 4378, 0, 8704, -27100, -11500, -19200, 0);
        sleep(10, 2);
        sce_espr_on(0, 4378, 0, 9216, -27100, -11500, -19300, 0);
        sce_espr_on(0, 4378, 0, 9216, -27100, -11200, -18400, 0);
        sleep(10, 2);
        sce_espr_on(0, 4378, 0, 9728, -27050, -11200, -18400, 0);
        sce_espr_on(0, 4378, 0, 9728, -27100, -10800, -18200, 0);
        sleep(10, 2);
        sce_espr_on(0, 4378, 0, 10240, -27100, -11900, -19950, 0);
        sce_espr_on(0, 4378, 0, 10240, -27100, -11500, -19200, 0);
        sce_espr_on(0, 4378, 0, 10240, -27100, -11200, -18450, 0);
        sleep(10, 2);
        evt_exec(255, I_GOSUB, main_0A);
        cut_chg(3);
        sce_espr_kill(26, 17, 0, 0);
        sce_espr_on(0, 35, 0, 11008, -21900, -5700, -17100, 0);
        evt_next();
        sce_espr_on(0, 36, 0, 9216, -21900, -1600, -17300, 0);
        evt_next();
        sce_espr_on(0, 35, 0, 11008, -21905, -5800, -17100, 0);
        evt_next();
        sce_espr_on(0, 36, 0, 9216, -21905, -1600, -17300, 0);
        sleep(10, 30);
        sce_bgm_control(1, 5, 0, 0, 0);
        sleep(10, 60);
        cut_chg(8);
        sleep(10, 90);
        evt_exec(255, I_GOSUB, main_0B);
        cut_chg(7);
        sce_espr_kill(35, 0, 0, 0);
        sce_espr_kill(36, 0, 0, 0);
        sleep(10, 100);
        bits[4][0] = 1;
        if (game.scenario == 1)
        {
            aot_reset(1, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_0E, 0, 0);
        }
        aot_reset(2, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, 0, 0, 0, 255);
        cut_chg(15);
        game.cutscene = 0;
        evt_exec(255, I_GOSUB, main_0C);
        sleep(10, 20);
        cut_auto(1);
        bits[2][7] = 0;
        bits[5][1] = 1;
        aot_on(4);
        sleep(10, 1);
        if (game.scenario == 0)
        {
            if (game.player == 0)
            {
                sce_bgmtbl_set(0, 8, 1, 65280, 0);
                sce_bgmtbl_set(0, 10, 1, 255, 0);
            }
            else
            {
                sce_bgmtbl_set(0, 8, 1, 65280, 0);
            }
        }
        else
        {
            if (game.player == 0)
            {
                sce_bgmtbl_set(0, 8, 1, 65280, 0);
                sce_bgmtbl_set(0, 9, 1, 1822, 64);
                sce_bgmtbl_set(0, 10, 1, 255, 0);
            }
            else
            {
                sce_bgmtbl_set(0, 8, 1, 65280, 0);
                sce_bgmtbl_set(0, 9, 1, 1822, 32832);
            }
        }
        bits[5][3] = 1;
        return 0;
    }

    main_08()
    {
        work_set(WK_PLAYER, 0);
        if (game.player == 1)
        {
            pos_set(0, -19920, 0, -21250);
        }
        else
        {
            pos_set(0, -19502, 0, -21200);
        }
        member_set(15, 0, 8);
        sleep(10, 20);
        if (game.player == 1)
        {
            plc_motion(0, 15, 0);
        }
        else
        {
            plc_motion(0, 15, 1);
        }
        sleep(10, 30);
        if (game.player == 1)
        {
            plc_motion(0, 16, 0);
        }
        else
        {
            plc_motion(0, 16, 1);
        }
        sleep(10, 28);
        se_on(2, 261, 1, 6000, -200, 0);
        sleep(10, 22);
        for 2 times
        {
            if (game.player == 1)
            {
                plc_motion(0, 17, 0);
            }
            else
            {
                plc_motion(0, 17, 1);
            }
            sleep(10, 18);
            se_on(2, 261, 1, 6000, -200, 0);
            sleep(10, 12);
        }
        bits[5][2] = 1;
        for 2 times
        {
            plc_motion(0, 17, 0);
            sleep(10, 18);
            se_on(2, 261, 1, 6000, -200, 0);
            sleep(10, 12);
        }
        plc_motion(0, 17, 0);
        sleep(10, 18);
        se_on(2, 261, 1, 6000, -200, 0);
        sleep(10, 15);
        sleep(10, 12);
        plc_cnt(50);
        plc_motion(0, 16, 192);
        sleep(10, 50);
        plc_cnt(30);
        plc_motion(0, 15, 192);
        sleep(10, 30);
        plc_neck(2, 0, 600, -512, 15, 20);
        sleep(10, 180);
        plc_neck(0, 0, 0, 0, 40, 50);
        sleep(10, 60);
        cut_be_set(5, 1, 0);
        plc_ret();
        return 0;
    }

    main_09()
    {
        work_set(WK_OBJECT, 0);
        pos_set(0, -20880, -1800, -21245);
        sleep(10, 20);
        sleep(10, 30);
        nop_8b(100, 10, 0, 40, 0);
        nop_8b(110, 10, 0, 70, 0);
        nop_8b(120, 10, 0, 100, 0);
        nop_8b(130, 10, 0, 130, 0);
        nop_8b(140, 10, 0, 160, 0);
        speed_set(3, 0);
        speed_set(9, -1);
        for 10 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(3, -10);
        speed_set(9, -1);
        for 5 times
        {
            add_speed();
            evt_next();
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, -2);
        for 23 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, 10);
        for 5 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        for 5 times
        {
            sleep(10, 17);
            speed_set(3, -32);
            speed_set(9, -2);
            for 10 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
            speed_set(9, 8);
            for 4 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
        }
        while (
        {
            evt_next();
        }
        pos_set(0, 0, 0, 0);
        return 0;
    }

    main_0A()
    {
        sce_espr_kill(13, 0, 0, 0);
        sce_espr_kill(14, 0, 0, 0);
        evt_next();
        sce_espr_on(0, 14, 0, 8192, -21241, 0, -16667, -512);
        sce_espr_on(0, 14, 0, 6144, -20238, 0, -14337, 0);
        sce_espr_on(0, 14, 0, 9216, -21754, 0, -14550, 0);
        sce_espr_on(0, 13, 0, 8192, -22751, -5000, -15861, 512);
        sce_espr_on(0, 13, 0, 10240, -22755, -4800, -16847, 512);
        for 3 times
        {
            sce_espr_on(0, 4378, 0, 4996, -22000, -3200, -17300, 100);
            sleep(10, 4);
            sce_espr_on(0, 4378, 0, 4096, -22000, -2900, -16600, -512);
            sleep(10, 10);
            sce_espr_on(0, 4378, 0, 3296, -20900, -50, -16600, -3199);
            sleep(10, 2);
            sce_espr_on(0, 4378, 0, 5096, -19400, -250, -16400, -2999);
            sleep(10, 4);
        }
        sce_espr_on(0, 772, 0, 11776, -22751, -4900, -15486, 512);
        se_on(2, 266, 0, -22751, -4900, -15486);
        sleep(10, 10);
        sce_espr_on(0, 772, 0, 10240, -23018, -500, -18726, -26);
        se_on(2, 266, 0, -23018, -500, -18726);
        evt_next();
        sce_espr_on(0, 772, 0, 11776, -22154, -100, -17286, 26);
        se_on(2, 266, 0, -22751, -4900, -15486);
        return 0;
    }

    main_0B()
    {
        sce_espr_kill(13, 0, 0, 0);
        sce_espr_kill(14, 0, 0, 0);
        evt_next();
        sce_espr_on(0, 14, 0, 6144, -21241, 0, -16667, -512);
        sce_espr_on(0, 14, 0, 4096, -20238, 0, -14337, 0);
        sce_espr_on(0, 14, 0, 8192, -21754, 0, -14550, 0);
        sce_espr_on(0, 13, 0, 7680, -22751, -5000, -15861, 512);
        sce_espr_on(0, 13, 0, 8192, -22755, -4800, -16847, 512);
        sce_espr_on(0, 772, 0, 8192, -21586, 0, -19066, 26);
        sce_espr_on(0, 772, 0, 9216, -20948, 0, -17079, 26);
        sce_espr_on(0, 772, 0, 8704, -22100, 0, -16307, 26);
        se_on(2, 266, 0, -21241, 0, -16667);
        sleep(10, 8);
        return 0;
    }

    main_0C()
    {
        sce_espr_kill(13, 0, 0, 0);
        sce_espr_kill(14, 0, 0, 0);
        sce_espr_kill(4, 3, 0, 0);
        sleep(10, 40);
        evt_next();
        sce_espr_on(0, 772, 0, 9216, -22154, -100, -17286, 26);
        return 0;
    }

    main_0D()
    {
        if (bits[4][0] == 0)
        {
            sce_bgm_control(0, 0, 1, 1, 64);
        }
        aot_on(0);
        return 0;
    }

    main_0E()
    {
        game.cutscene = 1;
        bits[2][7] = 1;
        bits[4][181] = 1;
        sleep(10, 8);
        work_set(WK_PLAYER, 0);
        sleep(10, 10);
        plc_dest(0, 9, 4, -10550, -18550);
        while (
        {
            evt_next();
        }
        plc_motion(0, 18, 0);
        sleep(10, 9);
        for 30 times
        {
            plc_cnt(10);
            evt_next();
        }
        plc_neck(2, 0, -800, -800, 10, 10);
        for 36 times
        {
            plc_cnt(10);
            evt_next();
        }
        sce_bgm_control(0, 4, 0, 1, 65);
        sce_fade_set(2, 2, 7, 0, 248);
        movie_on(9);
        sleep(10, 1);
        sce_bgm_control(0, 3, 0, 128, 65);
        plc_motion(0, 18, 192);
        plc_cnt(10);
        sleep(10, 9);
        plc_neck(0, 0, 0, 0, 10, 10);
        sleep(10, 30);
        game.cutscene = 0;
        bits[2][7] = 0;
        aot_reset(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 168, 237, 0, 0, 156, 250);
        plc_ret();
        return 0;
    }

    main_0F()
    {
        while (
        {
            evt_next();
        }
        sce_espr_on(0, 14, 0, 11776, -25451, 0, -15224, -512);
        sce_espr_on(0, 14, 0, 12288, -24587, 0, -16936, 0);
        sce_espr_on(0, 14, 0, 12800, -21241, 0, -18267, -512);
        sce_espr_on(0, 14, 0, 15872, -23238, 0, -16837, 0);
        sce_espr_on(0, 14, 0, 10240, -20475, 0, -18572, 0);
        sce_espr_on(0, 13, 0, 11776, -22751, -4600, -15861, 512);
        sce_espr_on(0, 13, 0, 12800, -22755, -4000, -16847, 512);
        return 0;
    }
}
