.version 2
init
{
    init_00()
    {
        door_aot_se(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -28170, 21619, 3800, 990, -23360, 0, -23967, -960, 0, 1, 2, 0, 2, 1, 0, 0, UNLOCKED, 0);
        door_aot_se(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -26707, 14079, 1140, 2300, -9212, 0, 2520, 1368, 0, 24, 11, 0, 10, 1, 0, 0, UNLOCKED, 0);
        obj_model_set(0, 0, 0, 0, 0, 0, 0, 10, 0, -13825, -1650, 15900, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        sce_em_set(0, 0, ENEMY_ZOMBIERANDOM, 70, 0, 0, 8, 2, 51, -19176, 0, 15573, 40, 0, 0);
        sce_em_set(0, 1, ENEMY_ZOMBIERANDOM, 70, 0, 0, 7, 1, 52, -17121, 0, 14475, 4024, 0, 0);
        sce_em_set(0, 2, ENEMY_ZOMBIERANDOM, 70, 128, 0, 7, 0, 54, 20000, 20000, 20000, 4056, 0, 0);
        sce_em_set(0, 3, ENEMY_ZOMBIERANDOM, 64, 128, 0, 7, 0, 55, 20000, 20000, 20000, 4024, 0, 0);
        return 0;
        db(0xED, 0x47);
    }
}

main
{
    main_00()
    {
        evt_exec(255, I_GOSUB, main_0A);
        evt_exec(255, I_GOSUB, main_0B);
        if (bits[4][27] == 0)
        {
            aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_02, 0, 0);
            aot_set(6, SCE_EVENT, SAT_PL | SAT_UNDER, 0, 0, -22469, 17635, 3200, 6000, 255, 0, I_GOSUB, main_02, 0, 0);
        }
        main_04();
        main_13();
        evt_exec(255, I_GOSUB, main_11);
        return 0;
    }

    main_01()
    {
        return 0;
    }

    main_02()
    {
        aot_reset(6, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_reset(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 192, 164, 0, 0, 97, 162);
        bits[4][27] = 1;
        game.cutscene = 1;
        bits[2][7] = 1;
        sleep(10, 30);
        se_on(2, 289, 0, -23895, -1000, 20658);
        evt_exec(255, I_GOSUB, main_03);
        sleep(10, 10);
        xa_vol(100);
        xa_on(0, 11);
        sleep(10, 130);
        bits[2][7] = 0;
        game.cutscene = 0;
        return 0;
    }

    main_03()
    {
        sleep(10, 1);
        work_set(WK_PLAYER, 0);
        plc_neck(2, 0, 0, -128, 80, 80);
        sleep(10, 20);
        plc_neck(1, -24615, -2000, 23994, 80, 80);
        sleep(10, 80);
        plc_neck(0, 0, 0, 0, 30, 30);
        sleep(10, 60);
        plc_ret();
        return 0;
    }

    main_04()
    {
        if (bits[4][135] == 0)
        {
            aot_set(4, SCE_NORMAL, SAT_EM | SAT_UNDER, 0, 0, -15684, 15500, 2400, 2300, 0, 0, 0, 0, 0, 0);
            aot_set(5, SCE_NORMAL, SAT_EM | SAT_UNDER, 0, 0, -15684, 9800, 2400, 4000, 0, 0, 0, 0, 0, 0);
            aot_set(2, SCE_FLAG_CHG, SAT_PL | SAT_UNDER, 0, 0, -15000, -4000, 7000, 3000, 5, 0, 8, 0, 1, 0);
            aot_set(3, SCE_EVENT, SAT_PL | SAT_UNDER, 0, 0, -14508, 3209, 5100, 2700, 255, 0, I_GOSUB, main_06, 0, 0);
            sca_id_set(0, 0, 244);
        }
        else
        {
            work_set(WK_OBJECT, 0);
            member_set(15, 0, 8);
            sca_id_set(0, 0, 0);
            evt_exec(255, I_GOSUB, main_12);
        }
        return 0;
    }

    main_05()
    {
        if (bits[5][8] == 1 && bits[4][135] == 0)
        {
            bits[4][135] = 1;
            evt_exec(255, I_GOSUB, main_06);
        }
        return 0;
    }

    main_06()
    {
        aot_reset(3, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        while (
        {
            evt_next();
            if (arr[26] == 4)
            {
                if (bits[5][4] == 0)
                {
                    bits[5][10] = 1;
                }
            }
            if (arr[26] == 5)
            {
                if (bits[5][4] == 0)
                {
                    bits[5][10] = 1;
                }
            }
        }
        aot_reset(4, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_reset(5, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        bits[4][135] = 1;
        game.cutscene = 1;
        bits[2][7] = 1;
        cut_chg(2);
        evt_exec(255, I_GOSUB, main_07);
        evt_exec(255, I_GOSUB, main_08);
        sleep(10, 30);
        bits[2][7] = 0;
        game.cutscene = 0;
        cut_chg(4);
        cut_auto(1);
        return 0;
    }

    main_07()
    {
        work_set(WK_OBJECT, 0);
        member_set(15, 0, 0);
        speed_set(4, -80);
        speed_set(10, -10);
        nop_8a(0, 8, 0, 0, 0);
        nop_8b(180, 1, 0, 0, 0);
        nop_8b(250, 5, 0, 1, 0);
        for 3 times
        {
            add_speed();
            add_aspeed();
        }
        evt_next();
        se_on(2, 266, 4, 0, 0, 0);
        for 4 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        for 7 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        member_set(15, 0, 8);
        evt_next();
        speed_set(4, 60);
        speed_set(10, -20);
        for 6 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        return 0;
    }

    main_08()
    {
        sca_id_set(0, 0, 0);
        work_set(WK_ENEMY, 2);
        pos_set(0, -13799, 0, 15091);
        member_copy(16, 7);
        var_10 -= 8000;
        member_set2(7, 16);
        work_set(WK_ENEMY, 3);
        pos_set(0, -23121, 0, 14906);
        member_copy(16, 7);
        var_10 -= 8000;
        member_set2(7, 16);
        return 0;
    }

    main_09()
    {
        work_set(WK_ENEMY, 0);
        member_set(2, 1, 0);
        member_set(3, 13, 0);
        member_set(4, 0, 0);
        member_set(5, 0, 0);
        evt_next();
        member_set(3, 2, 0);
        member_set(4, 0, 0);
        return 0;
    }

    main_0A()
    {
        if (arr[26] == 2)
        {
            if (bits[5][4] == 0)
            {
                work_set(WK_ENEMY, 0);
                if (bits[6][51] == 0)
                {
                    if (&2 != 6)
                    {
                        if (&9 == 4)
                        {
                            if (arr[29] >= 20480)
                            {
                                bits[5][4] = 1;
                                evt_exec(255, I_GOSUB, main_0C);
                                sce_rnd();
                            }
                        }
                    }
                }
            }
            if (bits[5][5] == 0)
            {
                work_set(WK_ENEMY, 1);
                if (bits[6][52] == 0)
                {
                    if (&2 != 6)
                    {
                        if (&9 == 5)
                        {
                            if (arr[29] >= 28672)
                            {
                                evt_exec(255, I_GOSUB, main_0D);
                                sce_rnd();
                            }
                        }
                    }
                }
            }
        }
        sleep(10, 2);
        goto off_1B84;
        return 0;
    }

    main_0B()
    {
        if (bits[5][4] == 1)
        {
            work_set(WK_ENEMY, 0);
            if (&24 ? -32768)
            {
                se_on(2, 288, 3, 0, 0, 0);
                if (bits[5][7] == 0)
                {
                    bits[5][7] = 1;
                    main_0F();
                }
                else
                {
                    bits[5][7] = 0;
                    main_10();
                }
            }
            work_set(WK_ENEMY, 0);
            if (&24 ? 16384)
            {
            }
            else
            {
                bits[5][4] = 0;
            }
            member_set(24, 0, 0);
        }
        if (bits[5][5] == 1)
        {
            work_set(WK_ENEMY, 1);
            if (&24 ? -32768)
            {
                se_on(2, 288, 259, 0, 0, 0);
            }
            if (&24 ? 16384)
            {
            }
            else
            {
                bits[5][5] = 0;
            }
            member_set(24, 0, 0);
        }
        evt_next();
        goto off_1C24;
        return 0;
    }

    main_0C()
    {
        work_set(WK_ENEMY, 0);
        member_set(23, 0, 128);
        sleep(10, 1);
        member_copy(16, 23);
        var_10 &= 7FFF;
        member_set2(23, 16);
        return 0;
    }

    main_0D()
    {
        work_set(WK_ENEMY, 1);
        bits[5][5] = 1;
        member_set(23, 0, 64);
        sleep(10, 1);
        member_copy(16, 23);
        var_10 &= BFFF;
        member_set2(23, 16);
        return 0;
    }

    main_0E()
    {
        return 0;
    }

    main_0F()
    {
        work_set(WK_OBJECT, 0);
        member_set(15, 226, 255);
        evt_next();
        member_set(15, 221, 255);
        evt_next();
        member_set(15, 226, 255);
        evt_next();
        return 0;
    }

    main_10()
    {
        work_set(WK_OBJECT, 0);
        member_set(15, 0, 0);
        evt_next();
        member_set(15, 5, 0);
        evt_next();
        member_set(15, 0, 0);
        evt_next();
        return 0;
    }

    main_11()
    {
        evt_next();
        switch (var_1A)
        {
        case 0:
            sce_bgm_control(0, 0, 1, 1, 65);
            sce_bgm_control(0, 0, 2, 61, 65);
            sce_bgm_control(0, 0, 3, 51, 65);
            break;
        case 1:
            sce_bgm_control(0, 0, 1, 1, 65);
            sce_bgm_control(0, 0, 2, 61, 65);
            sce_bgm_control(0, 0, 3, 51, 65);
            break;
        case 2:
            sce_bgm_control(0, 0, 1, 1, 65);
            sce_bgm_control(0, 0, 2, 61, 65);
            sce_bgm_control(0, 0, 3, 51, 65);
            break;
        case 3:
            sce_bgm_control(0, 0, 1, 1, 65);
            sce_bgm_control(0, 0, 2, 61, 65);
            sce_bgm_control(0, 0, 3, 51, 65);
            break;
        case 4:
            sce_bgm_control(0, 0, 1, 1, 65);
            sce_bgm_control(0, 0, 2, 71, 65);
            sce_bgm_control(0, 0, 3, 51, 65);
            break;
        case 5:
            sce_bgm_control(0, 0, 1, 1, 65);
            sce_bgm_control(0, 0, 2, 71, 65);
            sce_bgm_control(0, 0, 3, 61, 65);
            break;
        case 6:
            sce_bgm_control(0, 0, 1, 1, 65);
            sce_bgm_control(0, 0, 2, 61, 65);
            sce_bgm_control(0, 0, 3, 51, 65);
            break;
        case 7:
            sce_bgm_control(0, 0, 1, 1, 65);
            sce_bgm_control(0, 0, 2, 61, 65);
            sce_bgm_control(0, 0, 3, 51, 65);
            break;
        }
        do
        {
            sleep(10, 1);
        } while (bits[1][11] == 0);
        goto off_1D37;
        return 0;
    }

    main_12()
    {
        evt_next();
        if (bits[6][54] == 0)
        {
            work_set(WK_ENEMY, 2);
            pos_set(0, -23121, 0, 14906);
            member_copy(16, 7);
            var_10 -= 8000;
            member_set2(7, 16);
        }
        if (bits[6][55] == 0)
        {
            work_set(WK_ENEMY, 3);
            pos_set(0, -17708, 0, 14058);
            member_copy(16, 7);
            var_10 -= 8000;
            member_set2(7, 16);
        }
        return 0;
    }

    main_13()
    {
        obj_model_set(1, 0, 0, 0, 0, 0, 0, 10, 16, -11878, -900, -5037, 0, -2304, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (game.difficult == 0)
        {
            item_aot_set(7, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -12828, -5937, 2900, 2700, ITEM_HANDGUNAMMO, 30, 154, 1, 0);
        }
        else
        {
            item_aot_set(7, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 0, 0, -12828, -5937, 2900, 2700, ITEM_HANDGUNAMMO, 15, 154, 1, 0);
        }
        return 0;
        db(0x28, 0x00, 0x44, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00);
        db(0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0xF8, 0x05);
        db(0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x0A, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x60, 0x00);
        db(0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x58, 0x06, 0x00, 0x00, 0x3E, 0x00);
        db(0x00, 0x00, 0x98, 0x0A, 0x00, 0x00, 0xFA, 0xFF, 0xA3, 0x00, 0xA8, 0xFF, 0x00, 0x00, 0xFA, 0xFF);
        db(0xA3, 0x00, 0xF1, 0xF8, 0x00, 0x00, 0xFA, 0xFF, 0xEE, 0xFE, 0xA8, 0xFF, 0x00, 0x00, 0xFA, 0xFF);
        db(0xEE, 0xFE, 0xF1, 0xF8, 0x00, 0x00, 0x06, 0x00, 0xA3, 0x00, 0xA8, 0xFF, 0x00, 0x00, 0x06, 0x00);
        db(0xA3, 0x00, 0xF1, 0xF8, 0x00, 0x00, 0x06, 0x00, 0xEE, 0xFE, 0xA8, 0xFF, 0x00, 0x00, 0x06, 0x00);
        db(0xEE, 0xFE, 0xF1, 0xF8, 0x00, 0x00, 0xFA, 0xFF, 0xEC, 0xFE, 0x50, 0xFE, 0x00, 0x00, 0xFA, 0xFF);
        db(0xF5, 0xF8, 0x50, 0xFE, 0x00, 0x00, 0xFA, 0xFF, 0xF5, 0xF8, 0xA8, 0xFF, 0x00, 0x00, 0xFA, 0xFF);
        db(0xEC, 0xFE, 0xA8, 0xFF, 0x00, 0x00, 0x06, 0x00, 0xF5, 0xF8, 0x50, 0xFE, 0x00, 0x00, 0x06, 0x00);
        db(0xEC, 0xFE, 0x50, 0xFE, 0x00, 0x00, 0x06, 0x00, 0xEC, 0xFE, 0xA8, 0xFF, 0x00, 0x00, 0x06, 0x00);
        db(0xF5, 0xF8, 0xA8, 0xFF, 0x00, 0x00, 0xFA, 0xFF, 0xEC, 0xFE, 0xF8, 0xFC, 0x00, 0x00, 0xFA, 0xFF);
        db(0xF5, 0xF8, 0xF8, 0xFC, 0x00, 0x00, 0x06, 0x00, 0xF5, 0xF8, 0xF8, 0xFC, 0x00, 0x00, 0x06, 0x00);
        db(0xEC, 0xFE, 0xF8, 0xFC, 0x00, 0x00, 0xFA, 0xFF, 0xEC, 0xFE, 0xA0, 0xFB, 0x00, 0x00, 0xFA, 0xFF);
        db(0xF5, 0xF8, 0xA0, 0xFB, 0x00, 0x00, 0x06, 0x00, 0xF5, 0xF8, 0xA0, 0xFB, 0x00, 0x00, 0x06, 0x00);
        db(0xEC, 0xFE, 0xA0, 0xFB, 0x00, 0x00, 0xFA, 0xFF, 0xF5, 0xF8, 0x49, 0xFA, 0x00, 0x00, 0xFA, 0xFF);
        db(0xEC, 0xFE, 0x49, 0xFA, 0x00, 0x00, 0xFA, 0xFF, 0xEC, 0xFE, 0xF1, 0xF8, 0x00, 0x00, 0xFA, 0xFF);
        db(0xF5, 0xF8, 0xF1, 0xF8, 0x00, 0x00, 0x06, 0x00, 0xEC, 0xFE, 0x49, 0xFA, 0x00, 0x00, 0x06, 0x00);
        db(0xF5, 0xF8, 0x49, 0xFA, 0x00, 0x00, 0x06, 0x00, 0xF5, 0xF8, 0xF1, 0xF8, 0x00, 0x00, 0x06, 0x00);
        db(0xEC, 0xFE, 0xF1, 0xF8, 0x00, 0x00, 0xFA, 0xFF, 0xB5, 0x05, 0x50, 0xFE, 0x00, 0x00, 0xFA, 0xFF);
        db(0xA9, 0x00, 0x50, 0xFE, 0x00, 0x00, 0xFA, 0xFF, 0xA9, 0x00, 0xA8, 0xFF, 0x00, 0x00, 0xFA, 0xFF);
        db(0xB5, 0x05, 0xA8, 0xFF, 0x00, 0x00, 0x06, 0x00, 0xA9, 0x00, 0x50, 0xFE, 0x00, 0x00, 0x06, 0x00);
        db(0xB5, 0x05, 0x50, 0xFE, 0x00, 0x00, 0x06, 0x00, 0xB5, 0x05, 0xA8, 0xFF, 0x00, 0x00, 0x06, 0x00);
        db(0xA9, 0x00, 0xA8, 0xFF, 0x00, 0x00, 0xFA, 0xFF, 0xB5, 0x05, 0xF8, 0xFC, 0x00, 0x00, 0xFA, 0xFF);
        db(0xA9, 0x00, 0xF8, 0xFC, 0x00, 0x00, 0x06, 0x00, 0xA9, 0x00, 0xF8, 0xFC, 0x00, 0x00, 0x06, 0x00);
        db(0xB5, 0x05, 0xF8, 0xFC, 0x00, 0x00, 0xFA, 0xFF, 0xB5, 0x05, 0xA0, 0xFB, 0x00, 0x00, 0xFA, 0xFF);
        db(0xA9, 0x00, 0xA0, 0xFB, 0x00, 0x00, 0x06, 0x00, 0xA9, 0x00, 0xA0, 0xFB, 0x00, 0x00, 0x06, 0x00);
        db(0xB5, 0x05, 0xA0, 0xFB, 0x00, 0x00, 0xFA, 0xFF, 0xA9, 0x00, 0x49, 0xFA, 0x00, 0x00, 0xFA, 0xFF);
        db(0xB5, 0x05, 0x49, 0xFA, 0x00, 0x00, 0xFA, 0xFF, 0xB5, 0x05, 0xF1, 0xF8, 0x00, 0x00, 0xFA, 0xFF);
        db(0xA9, 0x00, 0xF1, 0xF8, 0x00, 0x00, 0x06, 0x00, 0xB5, 0x05, 0x49, 0xFA, 0x00, 0x00, 0x06, 0x00);
        db(0xA9, 0x00, 0x49, 0xFA, 0x00, 0x00, 0x06, 0x00, 0xA9, 0x00, 0xF1, 0xF8, 0x00, 0x00, 0x06, 0x00);
        db(0xB5, 0x05, 0xF1, 0xF8, 0x00, 0x00, 0xDC, 0xFF, 0x28, 0x06, 0x53, 0xFF, 0x00, 0x00, 0xDC, 0xFF);
        db(0xFB, 0xF8, 0x44, 0xF9, 0x00, 0x00, 0xDC, 0xFF, 0x80, 0x05, 0x02, 0x00, 0x00, 0x00, 0xDC, 0xFF);
        db(0x05, 0x06, 0xCD, 0xFF, 0x00, 0x00, 0xDC, 0xFF, 0xFB, 0xF8, 0x54, 0xFF, 0x00, 0x00, 0x24, 0x00);
        db(0x28, 0x06, 0x53, 0xFF, 0x00, 0x00, 0x24, 0x00, 0x05, 0x06, 0xCD, 0xFF, 0x00, 0x00, 0x24, 0x00);
        db(0x80, 0x05, 0x02, 0x00, 0x00, 0x00, 0xDC, 0xFF, 0xBF, 0x05, 0x54, 0xFF, 0x00, 0x00, 0xDC, 0xFF);
        db(0x92, 0xF8, 0x53, 0xFF, 0x00, 0x00, 0xDC, 0xFF, 0xB5, 0xF8, 0xCD, 0xFF, 0x00, 0x00, 0xDC, 0xFF);
        db(0x39, 0xF9, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x92, 0xF8, 0x53, 0xFF, 0x00, 0x00, 0x24, 0x00);
        db(0xFB, 0xF8, 0x54, 0xFF, 0x00, 0x00, 0x24, 0x00, 0x39, 0xF9, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00);
        db(0xB5, 0xF8, 0xCD, 0xFF, 0x00, 0x00, 0x24, 0x00, 0xBF, 0x05, 0x44, 0xF9, 0x00, 0x00, 0xDC, 0xFF);
        db(0x28, 0x06, 0x45, 0xF9, 0x00, 0x00, 0xDC, 0xFF, 0x05, 0x06, 0xCB, 0xF8, 0x00, 0x00, 0xDC, 0xFF);
        db(0x80, 0x05, 0x97, 0xF8, 0x00, 0x00, 0x24, 0x00, 0x80, 0x05, 0x97, 0xF8, 0x00, 0x00, 0x24, 0x00);
        db(0x05, 0x06, 0xCB, 0xF8, 0x00, 0x00, 0x24, 0x00, 0x28, 0x06, 0x45, 0xF9, 0x00, 0x00, 0xDC, 0xFF);
        db(0xBF, 0x05, 0x44, 0xF9, 0x00, 0x00, 0x24, 0x00, 0x92, 0xF8, 0x45, 0xF9, 0x00, 0x00, 0x24, 0x00);
        db(0xFB, 0xF8, 0x44, 0xF9, 0x00, 0x00, 0xDC, 0xFF, 0x92, 0xF8, 0x45, 0xF9, 0x00, 0x00, 0x24, 0x00);
        db(0xBF, 0x05, 0x54, 0xFF, 0x00, 0x00, 0xDC, 0xFF, 0x39, 0xF9, 0x97, 0xF8, 0x00, 0x00, 0xDC, 0xFF);
        db(0xB5, 0xF8, 0xCB, 0xF8, 0x00, 0x00, 0x24, 0x00, 0x39, 0xF9, 0x97, 0xF8, 0x00, 0x00, 0x24, 0x00);
        db(0xB5, 0xF8, 0xCB, 0xF8, 0x00, 0x00, 0xDC, 0xFF, 0x47, 0xF9, 0xF0, 0xF8, 0x00, 0x00, 0x24, 0x00);
        db(0x73, 0x05, 0xF0, 0xF8, 0x00, 0x00, 0x24, 0x00, 0x47, 0xF9, 0xF0, 0xF8, 0x00, 0x00, 0xDC, 0xFF);
        db(0x73, 0x05, 0xF0, 0xF8, 0x00, 0x00, 0x24, 0x00, 0x47, 0xF9, 0xA8, 0xFF, 0x00, 0x00, 0xDC, 0xFF);
        db(0x47, 0xF9, 0xA8, 0xFF, 0x00, 0x00, 0xDC, 0xFF, 0x73, 0x05, 0xA8, 0xFF, 0x00, 0x00, 0x24, 0x00);
        db(0x73, 0x05, 0xA8, 0xFF, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        db(0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        db(0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        db(0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x02, 0xC1, 0x0F, 0x00, 0x00, 0x00, 0x00);
        db(0xA7, 0x0A, 0xF1, 0x0B, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x0F, 0x3E, 0x02, 0x00, 0x00, 0x00, 0x00);
        db(0xA7, 0x0A, 0xF1, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x37, 0xFD, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00);
        db(0xC9, 0x02, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x28, 0xF0, 0xC2, 0xFD, 0x00, 0x00, 0x00, 0x00);
        db(0x59, 0xF5, 0x0F, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x37, 0xFD, 0xC1, 0x0F, 0x00, 0x00, 0x00, 0x00);
        db(0xC9, 0x02, 0xC1, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x0F, 0xC2, 0xFD, 0x00, 0x00, 0x00, 0x00);
        db(0xD8, 0x0F, 0x3E, 0x02, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x0F, 0xC2, 0xFD, 0x00, 0x00, 0x00, 0x00);
        db(0xA7, 0x0A, 0x0F, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x37, 0xFD, 0xC1, 0x0F, 0x00, 0x00, 0x00, 0x00);
        db(0x59, 0xF5, 0xF1, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x28, 0xF0, 0xC2, 0xFD, 0x00, 0x00, 0x00, 0x00);
        db(0x28, 0xF0, 0x3E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x28, 0xF0, 0x3E, 0x02, 0x00, 0x00, 0x00, 0x00);
        db(0x59, 0xF5, 0xF1, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x37, 0xFD, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00);
        db(0x59, 0xF5, 0x0F, 0xF4, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x02, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00);
        db(0xA7, 0x0A, 0x0F, 0xF4, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x0B, 0xC7, 0x0A, 0x00, 0x00, 0x00, 0x00);
        db(0xB2, 0x0E, 0x53, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00);
        db(0x2C, 0xF4, 0xC7, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xF1, 0x53, 0x06, 0x00, 0x00, 0x00, 0x00);
        db(0x4E, 0xF1, 0x53, 0x06, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xF1, 0xAD, 0xF9, 0x00, 0x00, 0x00, 0x00);
        db(0x4E, 0xF1, 0xAD, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x2C, 0xF4, 0x39, 0xF5, 0x00, 0x00, 0x00, 0x00);
        db(0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x0E, 0xAD, 0xF9, 0x00, 0x00, 0x00, 0x00);
        db(0xD4, 0x0B, 0x39, 0xF5, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x0E, 0x53, 0x06, 0x00, 0x00, 0x00, 0x00);
        db(0xB2, 0x0E, 0xAD, 0xF9, 0x00, 0x00, 0x36, 0x00, 0x51, 0x00, 0x36, 0x00, 0x57, 0x00, 0x36, 0x00);
        db(0x50, 0x00, 0x37, 0x00, 0x55, 0x00, 0x37, 0x00, 0x39, 0x00, 0x37, 0x00, 0x52, 0x00, 0x3A, 0x00);
        db(0x47, 0x00, 0x3A, 0x00, 0x45, 0x00, 0x3A, 0x00, 0x44, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3B, 0x00);
        db(0x42, 0x00, 0x3B, 0x00, 0x41, 0x00, 0x42, 0x00, 0x4D, 0x00, 0x42, 0x00, 0x48, 0x00, 0x42, 0x00);
        db(0x4E, 0x00, 0x43, 0x00, 0x4F, 0x00, 0x43, 0x00, 0x4A, 0x00, 0x43, 0x00, 0x49, 0x00, 0x46, 0x00);
        db(0x53, 0x00, 0x46, 0x00, 0x3E, 0x00, 0x46, 0x00, 0x3D, 0x00, 0x47, 0x00, 0x3B, 0x00, 0x47, 0x00);
        db(0x40, 0x00, 0x47, 0x00, 0x38, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00);
        db(0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00);
        db(0x01, 0x00, 0x01, 0x00, 0x05, 0x00, 0x02, 0x00, 0x07, 0x00, 0x02, 0x00, 0x06, 0x00, 0x02, 0x00);
        db(0x05, 0x00, 0x02, 0x00, 0x04, 0x00, 0x03, 0x00, 0x06, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x00);
        db(0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00);
        db(0x04, 0x00, 0x04, 0x00, 0x05, 0x00, 0x05, 0x00, 0x06, 0x00, 0x05, 0x00, 0x07, 0x00, 0x05, 0x00);
        db(0x02, 0x00, 0x05, 0x00, 0x03, 0x00, 0x06, 0x00, 0x0B, 0x00, 0x06, 0x00, 0x0A, 0x00, 0x06, 0x00);
        db(0x08, 0x00, 0x06, 0x00, 0x09, 0x00, 0x07, 0x00, 0x0F, 0x00, 0x07, 0x00, 0x0E, 0x00, 0x07, 0x00);
        db(0x0C, 0x00, 0x07, 0x00, 0x0D, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x09, 0x00, 0x08, 0x00);
        db(0x10, 0x00, 0x08, 0x00, 0x11, 0x00, 0x09, 0x00, 0x0C, 0x00, 0x09, 0x00, 0x0D, 0x00, 0x09, 0x00);
        db(0x12, 0x00, 0x09, 0x00, 0x13, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0A, 0x00, 0x11, 0x00, 0x0A, 0x00);
        db(0x14, 0x00, 0x0A, 0x00, 0x15, 0x00, 0x0B, 0x00, 0x12, 0x00, 0x0B, 0x00, 0x13, 0x00, 0x0B, 0x00);
        db(0x16, 0x00, 0x0B, 0x00, 0x17, 0x00, 0x0C, 0x00, 0x1B, 0x00, 0x0C, 0x00, 0x1A, 0x00, 0x0C, 0x00);
        db(0x18, 0x00, 0x0C, 0x00, 0x19, 0x00, 0x0D, 0x00, 0x14, 0x00, 0x0D, 0x00, 0x15, 0x00, 0x0D, 0x00);
        db(0x19, 0x00, 0x0D, 0x00, 0x18, 0x00, 0x0E, 0x00, 0x1F, 0x00, 0x0E, 0x00, 0x1E, 0x00, 0x0E, 0x00);
        db(0x1C, 0x00, 0x0E, 0x00, 0x1D, 0x00, 0x0F, 0x00, 0x16, 0x00, 0x0F, 0x00, 0x17, 0x00, 0x0F, 0x00);
        db(0x1D, 0x00, 0x0F, 0x00, 0x1C, 0x00, 0x10, 0x00, 0x23, 0x00, 0x10, 0x00, 0x22, 0x00, 0x10, 0x00);
        db(0x20, 0x00, 0x10, 0x00, 0x21, 0x00, 0x11, 0x00, 0x27, 0x00, 0x11, 0x00, 0x26, 0x00, 0x11, 0x00);
        db(0x24, 0x00, 0x11, 0x00, 0x25, 0x00, 0x12, 0x00, 0x20, 0x00, 0x12, 0x00, 0x21, 0x00, 0x12, 0x00);
        db(0x28, 0x00, 0x12, 0x00, 0x29, 0x00, 0x13, 0x00, 0x24, 0x00, 0x13, 0x00, 0x25, 0x00, 0x13, 0x00);
        db(0x2A, 0x00, 0x13, 0x00, 0x2B, 0x00, 0x14, 0x00, 0x28, 0x00, 0x14, 0x00, 0x29, 0x00, 0x14, 0x00);
        db(0x2C, 0x00, 0x14, 0x00, 0x2D, 0x00, 0x15, 0x00, 0x2A, 0x00, 0x15, 0x00, 0x2B, 0x00, 0x15, 0x00);
        db(0x2E, 0x00, 0x15, 0x00, 0x2F, 0x00, 0x16, 0x00, 0x33, 0x00, 0x16, 0x00, 0x32, 0x00, 0x16, 0x00);
        db(0x30, 0x00, 0x16, 0x00, 0x31, 0x00, 0x17, 0x00, 0x2C, 0x00, 0x17, 0x00, 0x2D, 0x00, 0x17, 0x00);
        db(0x31, 0x00, 0x17, 0x00, 0x30, 0x00, 0x18, 0x00, 0x37, 0x00, 0x18, 0x00, 0x36, 0x00, 0x18, 0x00);
        db(0x34, 0x00, 0x18, 0x00, 0x35, 0x00, 0x19, 0x00, 0x2E, 0x00, 0x19, 0x00, 0x2F, 0x00, 0x19, 0x00);
        db(0x35, 0x00, 0x19, 0x00, 0x34, 0x00, 0x1A, 0x00, 0x5B, 0x00, 0x1A, 0x00, 0x58, 0x00, 0x1A, 0x00);
        db(0x4B, 0x00, 0x1A, 0x00, 0x54, 0x00, 0x1B, 0x00, 0x57, 0x00, 0x1B, 0x00, 0x51, 0x00, 0x1B, 0x00);
        db(0x56, 0x00, 0x1B, 0x00, 0x5A, 0x00, 0x1E, 0x00, 0x3B, 0x00, 0x1E, 0x00, 0x3E, 0x00, 0x1C, 0x00);
        db(0x3A, 0x00, 0x1C, 0x00, 0x3F, 0x00, 0x20, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x3B, 0x00, 0x1E, 0x00);
        db(0x3D, 0x00, 0x1E, 0x00, 0x38, 0x00, 0x22, 0x00, 0x4C, 0x00, 0x22, 0x00, 0x4B, 0x00, 0x20, 0x00);
        db(0x56, 0x00, 0x20, 0x00, 0x54, 0x00, 0x24, 0x00, 0x57, 0x00, 0x24, 0x00, 0x55, 0x00, 0x22, 0x00);
        db(0x50, 0x00, 0x22, 0x00, 0x52, 0x00, 0x26, 0x00, 0x3A, 0x00, 0x26, 0x00, 0x3F, 0x00, 0x24, 0x00);
        db(0x43, 0x00, 0x24, 0x00, 0x46, 0x00, 0x28, 0x00, 0x3D, 0x00, 0x28, 0x00, 0x38, 0x00, 0x26, 0x00);
        db(0x4E, 0x00, 0x26, 0x00, 0x49, 0x00, 0x2A, 0x00, 0x4A, 0x00, 0x2A, 0x00, 0x4D, 0x00, 0x28, 0x00);
        db(0x49, 0x00, 0x28, 0x00, 0x4E, 0x00, 0x2C, 0x00, 0x47, 0x00, 0x2C, 0x00, 0x42, 0x00, 0x2A, 0x00);
        db(0x46, 0x00, 0x2A, 0x00, 0x43, 0x00, 0x2E, 0x00, 0x41, 0x00, 0x2E, 0x00, 0x44, 0x00, 0x2C, 0x00);
        db(0x52, 0x00, 0x2C, 0x00, 0x50, 0x00, 0x30, 0x00, 0x42, 0x00, 0x30, 0x00, 0x47, 0x00, 0x2E, 0x00);
        db(0x41, 0x00, 0x2E, 0x00, 0x44, 0x00, 0x32, 0x00, 0x55, 0x00, 0x32, 0x00, 0x57, 0x00, 0x30, 0x00);
        db(0x54, 0x00, 0x30, 0x00, 0x56, 0x00, 0x34, 0x00, 0x4D, 0x00, 0x34, 0x00, 0x4A, 0x00, 0x32, 0x00);
        db(0x4C, 0x00, 0x32, 0x00, 0x4B, 0x00, 0x34, 0x00, 0x55, 0x00, 0x34, 0x00, 0x54, 0x00, 0x34, 0x00);
        db(0x39, 0x00, 0x34, 0x00, 0x58, 0x00, 0x35, 0x00, 0x4C, 0x00, 0x35, 0x00, 0x56, 0x00, 0x35, 0x00);
        db(0x59, 0x00, 0x35, 0x00, 0x5A, 0x00, 0x38, 0x00, 0x39, 0x00, 0x38, 0x00, 0x3C, 0x00, 0x38, 0x00);
        db(0x52, 0x00, 0x38, 0x00, 0x41, 0x00, 0x39, 0x00, 0x45, 0x00, 0x39, 0x00, 0x51, 0x00, 0x39, 0x00);
        db(0x44, 0x00, 0x39, 0x00, 0x50, 0x00, 0x3C, 0x00, 0x42, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00);
        db(0x43, 0x00, 0x3C, 0x00, 0x5D, 0x00, 0x3D, 0x00, 0x47, 0x00, 0x3D, 0x00, 0x46, 0x00, 0x3D, 0x00);
        db(0x45, 0x00, 0x3D, 0x00, 0x5C, 0x00, 0x3E, 0x00, 0x5C, 0x00, 0x3E, 0x00, 0x46, 0x00, 0x3E, 0x00);
        db(0x5F, 0x00, 0x3E, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3A, 0x00, 0x3F, 0x00, 0x43, 0x00, 0x3F, 0x00);
        db(0x5E, 0x00, 0x3F, 0x00, 0x5D, 0x00, 0x40, 0x00, 0x4D, 0x00, 0x40, 0x00, 0x4C, 0x00, 0x40, 0x00);
        db(0x48, 0x00, 0x40, 0x00, 0x59, 0x00, 0x41, 0x00, 0x4F, 0x00, 0x41, 0x00, 0x5B, 0x00, 0x41, 0x00);
        db(0x4A, 0x00, 0x41, 0x00, 0x4B, 0x00, 0x44, 0x00, 0x48, 0x00, 0x44, 0x00, 0x53, 0x00, 0x44, 0x00);
        db(0x4E, 0x00, 0x44, 0x00, 0x3D, 0x00, 0x45, 0x00, 0x40, 0x00, 0x45, 0x00, 0x4F, 0x00, 0x45, 0x00);
        db(0x38, 0x00, 0x45, 0x00, 0x49, 0x00, 0x48, 0x00, 0x53, 0x00, 0x48, 0x00, 0x5F, 0x00, 0x48, 0x00);
        db(0x3E, 0x00, 0x48, 0x00, 0x3F, 0x00, 0x49, 0x00, 0x3B, 0x00, 0x49, 0x00, 0x3A, 0x00, 0x49, 0x00);
        db(0x40, 0x00, 0x49, 0x00, 0x5E, 0x00, 0x4C, 0x00, 0x51, 0x00, 0x4C, 0x00, 0x39, 0x00, 0x4A, 0x00);
        db(0x5A, 0x00, 0x4A, 0x00, 0x58, 0x00, 0x4C, 0x00, 0x58, 0x00, 0x4C, 0x00, 0x5B, 0x00, 0x4C, 0x00);
        db(0x5A, 0x00, 0x4C, 0x00, 0x59, 0x00, 0x4D, 0x00, 0x5B, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x4D, 0x00);
        db(0x59, 0x00, 0x4E, 0x00, 0x48, 0x00, 0x51, 0x00, 0x40, 0x00, 0x51, 0x00, 0x53, 0x00, 0x4F, 0x00);
        db(0x4F, 0x00, 0x4F, 0x00, 0x48, 0x00, 0x53, 0x00, 0x5E, 0x00, 0x53, 0x00, 0x5F, 0x00, 0x51, 0x00);
        db(0x40, 0x00, 0x51, 0x00, 0x53, 0x00, 0x53, 0x00, 0x5C, 0x00, 0x53, 0x00, 0x5F, 0x00, 0x53, 0x00);
        db(0x5D, 0x00, 0x53, 0x00, 0x5E, 0x00, 0x54, 0x00, 0x45, 0x00, 0x55, 0x00, 0x5C, 0x00, 0x54, 0x00);
        db(0x3C, 0x00, 0x55, 0x00, 0x5D, 0x00, 0x56, 0x00, 0x51, 0x00, 0x57, 0x00, 0x45, 0x00, 0x56, 0x00);
        db(0x39, 0x00, 0x57, 0x00, 0x3C, 0x00, 0x04, 0x6E, 0x00, 0x78, 0x02, 0x6D, 0x80, 0x00, 0x01, 0x6E);
        db(0x00, 0x00, 0x02, 0x6D, 0x00, 0x78, 0x04, 0x6E, 0x80, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x02, 0x7D);
        db(0x00, 0x78, 0x04, 0x7C, 0x80, 0x00, 0x01, 0x7C, 0x00, 0x00, 0x04, 0x7C, 0x00, 0x78, 0x02, 0x7D);
        db(0x80, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x6A, 0x6D, 0x00, 0x78, 0x68, 0x6E, 0x80, 0x00, 0x6B, 0x6E);
        db(0x00, 0x00, 0x68, 0x6E, 0x00, 0x78, 0x6A, 0x6D, 0x80, 0x00, 0x6B, 0x6E, 0x00, 0x00, 0x68, 0x7C);
        db(0x00, 0x78, 0x6A, 0x7D, 0x80, 0x00, 0x6B, 0x7C, 0x00, 0x00, 0x6A, 0x7D, 0x00, 0x78, 0x68, 0x7C);
        db(0x80, 0x00, 0x6B, 0x7C, 0x00, 0x00, 0x33, 0x7D, 0x00, 0x78, 0x33, 0x6D, 0x80, 0x00, 0x40, 0x7D);
        db(0x00, 0x00, 0x40, 0x6D, 0x00, 0x00, 0x33, 0x6D, 0x00, 0x78, 0x33, 0x6D, 0x80, 0x00, 0x40, 0x6D);
        db(0x00, 0x00, 0x40, 0x6D, 0x00, 0x00, 0x33, 0x6D, 0x00, 0x78, 0x33, 0x7D, 0x80, 0x00, 0x40, 0x6D);
        db(0x00, 0x00, 0x40, 0x7D, 0x00, 0x00, 0x33, 0x7D, 0x00, 0x78, 0x33, 0x7D, 0x80, 0x00, 0x40, 0x7D);
        db(0x00, 0x00, 0x40, 0x7D, 0x00, 0x00, 0x40, 0x7D, 0x00, 0x78, 0x40, 0x6D, 0x80, 0x00, 0x40, 0x7D);
        db(0x00, 0x00, 0x40, 0x6D, 0x00, 0x00, 0x33, 0x7D, 0x00, 0x78, 0x33, 0x6D, 0x80, 0x00, 0x33, 0x7D);
        db(0x00, 0x00, 0x33, 0x6D, 0x00, 0x00, 0x7E, 0x6B, 0x00, 0x78, 0x7E, 0x00, 0x80, 0x00, 0x63, 0x6B);
        db(0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x78, 0x7E, 0x6B, 0x80, 0x00, 0x65, 0x00);
        db(0x00, 0x00, 0x65, 0x6B, 0x00, 0x00, 0x63, 0x6B, 0x00, 0x78, 0x63, 0x00, 0x80, 0x00, 0x4A, 0x6B);
        db(0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x78, 0x65, 0x6B, 0x80, 0x00, 0x4A, 0x00);
        db(0x00, 0x00, 0x4A, 0x6B, 0x00, 0x00, 0x4A, 0x6B, 0x00, 0x78, 0x4A, 0x00, 0x80, 0x00, 0x31, 0x6B);
        db(0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x78, 0x4A, 0x6B, 0x80, 0x00, 0x31, 0x00);
        db(0x00, 0x00, 0x31, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x6B, 0x80, 0x00, 0x18, 0x00);
        db(0x00, 0x00, 0x18, 0x6B, 0x00, 0x00, 0x31, 0x6B, 0x00, 0x78, 0x31, 0x00, 0x80, 0x00, 0x18, 0x6B);
        db(0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x78, 0x00, 0x00, 0x80, 0x00, 0x18, 0x6B);
        db(0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x78, 0x31, 0x6B, 0x80, 0x00, 0x18, 0x00);
        db(0x00, 0x00, 0x18, 0x6B, 0x00, 0x00, 0x7E, 0x69, 0x00, 0x78, 0x7E, 0x00, 0x80, 0x00, 0x63, 0x69);
        db(0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x78, 0x7E, 0x69, 0x80, 0x00, 0x65, 0x00);
        db(0x00, 0x00, 0x65, 0x69, 0x00, 0x00, 0x63, 0x69, 0x00, 0x78, 0x63, 0x00, 0x80, 0x00, 0x4A, 0x69);
        db(0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x78, 0x65, 0x69, 0x80, 0x00, 0x4A, 0x00);
        db(0x00, 0x00, 0x4A, 0x69, 0x00, 0x00, 0x4A, 0x69, 0x00, 0x78, 0x4A, 0x00, 0x80, 0x00, 0x31, 0x69);
        db(0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x78, 0x4A, 0x69, 0x80, 0x00, 0x31, 0x00);
        db(0x00, 0x00, 0x31, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x69, 0x80, 0x00, 0x18, 0x00);
        db(0x00, 0x00, 0x18, 0x69, 0x00, 0x00, 0x31, 0x69, 0x00, 0x78, 0x31, 0x00, 0x80, 0x00, 0x18, 0x69);
        db(0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x69, 0x00, 0x78, 0x00, 0x00, 0x80, 0x00, 0x18, 0x69);
        db(0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x78, 0x31, 0x69, 0x80, 0x00, 0x18, 0x00);
        db(0x00, 0x00, 0x18, 0x69, 0x00, 0x00, 0x66, 0x6D, 0x00, 0x78, 0x06, 0x6D, 0x80, 0x00, 0x66, 0x6D);
        db(0x00, 0x00, 0x06, 0x6D, 0x00, 0x00, 0x02, 0x6D, 0x00, 0x78, 0x04, 0x6E, 0x80, 0x00, 0x06, 0x6D);
        db(0x00, 0x00, 0x06, 0x6E, 0x00, 0x00, 0x6A, 0x7D, 0x00, 0x78, 0x6A, 0x7D, 0x80, 0x00, 0x66, 0x7E);
        db(0x00, 0x00, 0x66, 0x7E, 0x00, 0x00, 0x6A, 0x7D, 0x00, 0x78, 0x6A, 0x7D, 0x80, 0x00, 0x6B, 0x7C);
        db(0x00, 0x00, 0x6B, 0x7C, 0x00, 0x00, 0x66, 0x6D, 0x00, 0x78, 0x66, 0x6D, 0x80, 0x00, 0x06, 0x6D);
        db(0x00, 0x00, 0x06, 0x6D, 0x00, 0x00, 0x02, 0x6D, 0x00, 0x78, 0x02, 0x6D, 0x80, 0x00, 0x01, 0x6E);
        db(0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x66, 0x7E, 0x00, 0x78, 0x66, 0x7E, 0x80, 0x00, 0x06, 0x7E);
        db(0x00, 0x00, 0x06, 0x7E, 0x00, 0x00, 0x6B, 0x7C, 0x00, 0x78, 0x6B, 0x7C, 0x80, 0x00, 0x6B, 0x6E);
        db(0x00, 0x00, 0x6B, 0x6E, 0x00, 0x00, 0x6A, 0x6D, 0x00, 0x78, 0x6A, 0x6D, 0x80, 0x00, 0x6B, 0x6E);
        db(0x00, 0x00, 0x6B, 0x6E, 0x00, 0x00, 0x02, 0x7D, 0x00, 0x78, 0x02, 0x7D, 0x80, 0x00, 0x06, 0x7E);
        db(0x00, 0x00, 0x06, 0x7E, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x78, 0x01, 0x7C, 0x80, 0x00, 0x00, 0x6E);
        db(0x00, 0x00, 0x01, 0x6E, 0x00, 0x00, 0x02, 0x7D, 0x00, 0x78, 0x02, 0x7D, 0x80, 0x00, 0x00, 0x7C);
        db(0x00, 0x00, 0x01, 0x7C, 0x00, 0x00, 0x02, 0x6D, 0x00, 0x78, 0x02, 0x6D, 0x80, 0x00, 0x06, 0x6D);
        db(0x00, 0x00, 0x06, 0x6D, 0x00, 0x00, 0x6A, 0x6D, 0x00, 0x78, 0x6A, 0x6D, 0x80, 0x00, 0x66, 0x6D);
        db(0x00, 0x00, 0x66, 0x6D, 0x00, 0x00, 0x02, 0x6D, 0x00, 0x78, 0x06, 0x6D, 0x80, 0x00, 0x04, 0x6E);
        db(0x00, 0x00, 0x06, 0x6D, 0x00, 0x00, 0x66, 0x6D, 0x00, 0x78, 0x06, 0x6D, 0x80, 0x00, 0x65, 0x6E);
        db(0x00, 0x00, 0x06, 0x6E, 0x00, 0x00, 0x04, 0x6E, 0x00, 0x78, 0x04, 0x7C, 0x80, 0x00, 0x00, 0x6E);
        db(0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x04, 0x7C, 0x00, 0x78, 0x04, 0x6E, 0x80, 0x00, 0x01, 0x7C);
        db(0x00, 0x00, 0x01, 0x6E, 0x00, 0x00, 0x02, 0x7D, 0x00, 0x78, 0x04, 0x7C, 0x80, 0x00, 0x06, 0x7E);
        db(0x00, 0x00, 0x06, 0x7D, 0x00, 0x00, 0x02, 0x7D, 0x00, 0x78, 0x06, 0x7E, 0x80, 0x00, 0x04, 0x7C);
        db(0x00, 0x00, 0x06, 0x7D, 0x00, 0x00, 0x06, 0x7D, 0x00, 0x78, 0x06, 0x7E, 0x80, 0x00, 0x65, 0x7D);
        db(0x00, 0x00, 0x66, 0x7E, 0x00, 0x00, 0x66, 0x7E, 0x00, 0x78, 0x06, 0x7E, 0x80, 0x00, 0x66, 0x7D);
        db(0x00, 0x00, 0x06, 0x7D, 0x00, 0x00, 0x6A, 0x6D, 0x00, 0x78, 0x66, 0x6D, 0x80, 0x00, 0x68, 0x6E);
        db(0x00, 0x00, 0x65, 0x6E, 0x00, 0x00, 0x68, 0x6E, 0x00, 0x78, 0x66, 0x6D, 0x80, 0x00, 0x6A, 0x6D);
        db(0x00, 0x00, 0x66, 0x6D, 0x00, 0x00, 0x68, 0x6E, 0x00, 0x78, 0x68, 0x7C, 0x80, 0x00, 0x6B, 0x6E);
        db(0x00, 0x00, 0x6B, 0x7C, 0x00, 0x00, 0x68, 0x7C, 0x00, 0x78, 0x68, 0x6E, 0x80, 0x00, 0x6B, 0x7C);
        db(0x00, 0x00, 0x6B, 0x6E, 0x00, 0x00, 0x68, 0x7C, 0x00, 0x78, 0x65, 0x7D, 0x80, 0x00, 0x6A, 0x7D);
        db(0x00, 0x00, 0x66, 0x7E, 0x00, 0x00, 0x6A, 0x7D, 0x00, 0x78, 0x66, 0x7E, 0x80, 0x00, 0x68, 0x7C);
        db(0x00, 0x00, 0x66, 0x7D, 0x00, 0x00, 0x5A, 0x70, 0x00, 0x78, 0x58, 0x70, 0x80, 0x00, 0x5A, 0x70);
        db(0x00, 0x00, 0x58, 0x70, 0x00, 0x00, 0x58, 0x70, 0x00, 0x78, 0x58, 0x7A, 0x80, 0x00, 0x5A, 0x70);
        db(0x00, 0x00, 0x5A, 0x7A, 0x00, 0x00, 0x58, 0x7A, 0x00, 0x78, 0x58, 0x7A, 0x80, 0x00, 0x5A, 0x7A);
        db(0x00, 0x00, 0x5A, 0x7A, 0x00, 0x00, 0x58, 0x7A, 0x00, 0x78, 0x5A, 0x7A, 0x80, 0x00, 0x58, 0x7A);
        db(0x00, 0x00, 0x5A, 0x7A, 0x00, 0x00, 0x58, 0x7A, 0x00, 0x78, 0x5A, 0x7A, 0x80, 0x00, 0x58, 0x7A);
        db(0x00, 0x00, 0x5A, 0x7A, 0x00, 0x00, 0x5A, 0x70, 0x00, 0x78, 0x5A, 0x7A, 0x80, 0x00, 0x58, 0x70);
        db(0x00, 0x00, 0x58, 0x7A, 0x00, 0x00, 0x5A, 0x70, 0x00, 0x78, 0x5A, 0x70, 0x80, 0x00, 0x58, 0x70);
        db(0x00, 0x00, 0x58, 0x70, 0x00, 0x00, 0x5A, 0x70, 0x00, 0x78, 0x5A, 0x70, 0x80, 0x00, 0x58, 0x70);
        db(0x00, 0x00, 0x58, 0x70, 0x00, 0x00, 0xC4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00);
        db(0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x10, 0x00);
        db(0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x38, 0x00);
        db(0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x18, 0x01);
        db(0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0xB8, 0xFF, 0x00, 0x00, 0xA2, 0x00);
        db(0x00, 0x00, 0xB8, 0xFF, 0x00, 0x00, 0x79, 0xFF, 0x00, 0x00, 0xB8, 0xFF, 0xB8, 0xFF, 0xA2, 0x00);
        db(0x00, 0x00, 0xB8, 0xFF, 0xB8, 0xFF, 0x79, 0xFF, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0xA2, 0x00);
        db(0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x79, 0xFF, 0x00, 0x00, 0x48, 0x00, 0xB8, 0xFF, 0xA2, 0x00);
        db(0x00, 0x00, 0x48, 0x00, 0xB8, 0xFF, 0x79, 0xFF, 0x00, 0x00, 0xB8, 0xFF, 0xB8, 0xFF, 0xB8, 0xFF);
        db(0x00, 0x00, 0xB8, 0xFF, 0x00, 0x00, 0xB8, 0xFF, 0x00, 0x00, 0x48, 0x00, 0xB8, 0xFF, 0xB8, 0xFF);
        db(0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0xB8, 0xFF, 0x00, 0x00, 0x00, 0xF0, 0x06, 0x00, 0xF2, 0xFF);
        db(0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xE1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0);
        db(0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00);
        db(0x00, 0x00, 0x00, 0xF0, 0x06, 0x00, 0xF2, 0xFF, 0x00, 0x00, 0x00, 0xF0, 0x0D, 0x00, 0x04, 0x00);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00);
        db(0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00);
        db(0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00);
        db(0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00);
        db(0x07, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x05, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x03, 0x00);
        db(0x06, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x06, 0x00, 0x04, 0x00);
        db(0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x09, 0x00, 0x06, 0x00);
        db(0x01, 0x00, 0x05, 0x00, 0x0B, 0x00, 0x06, 0x00, 0x05, 0x00, 0x07, 0x00, 0x0A, 0x00, 0x08, 0x00);
        db(0x07, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x03, 0x00, 0x09, 0x00, 0x09, 0x00, 0x0A, 0x00);
        db(0x00, 0x00, 0x09, 0x00, 0x08, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x08, 0x00, 0x0C, 0x00);
        db(0x02, 0x00, 0x0B, 0x00, 0x0A, 0x00, 0x0C, 0x00, 0x06, 0x00, 0x0D, 0x00, 0x0B, 0x00, 0x0D, 0x00);
        db(0x05, 0x00, 0x0D, 0x00, 0x0A, 0x00, 0x0D, 0x00, 0x07, 0x00, 0x0E, 0x00, 0x0B, 0x00, 0x0F, 0x00);
        db(0x04, 0x00, 0x0E, 0x00, 0x09, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x4B, 0xAB, 0x40, 0x78, 0x5F, 0xAB);
        db(0x80, 0x00, 0x4B, 0xBE, 0x00, 0x00, 0x5F, 0xBF, 0x00, 0x00, 0x63, 0xA8, 0x40, 0x78, 0x63, 0x80);
        db(0x80, 0x00, 0x7F, 0xA8, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x4B, 0xBE, 0x40, 0x78, 0x00, 0xBE);
        db(0x80, 0x00, 0x4B, 0xAB, 0x00, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x7F, 0x80, 0x40, 0x78, 0x7F, 0xA9);
        db(0x80, 0x00, 0x63, 0x80, 0x00, 0x00, 0x63, 0xA9, 0x00, 0x00, 0x14, 0xAA, 0x40, 0x78, 0x00, 0xAA);
        db(0x80, 0x00, 0x14, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x4B, 0x80, 0x40, 0x78, 0x5F, 0x80);
        db(0x80, 0x00, 0x4B, 0xAB, 0x00, 0x00, 0x5F, 0xAB, 0x00, 0x00, 0x4B, 0xBE, 0x40, 0x78, 0x00, 0xBE);
        db(0x80, 0x00, 0x4B, 0xAB, 0x00, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x4B, 0xAB, 0x40, 0x78, 0x00, 0xAB);
        db(0x80, 0x00, 0x4B, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x4B, 0xAB, 0x40, 0x78, 0x5F, 0xAA);
        db(0x80, 0x00, 0x4B, 0xBE, 0x00, 0x00, 0x5F, 0xBE, 0x00, 0x00, 0x14, 0x80, 0x40, 0x78, 0x5F, 0x80);
        db(0x80, 0x00, 0x14, 0xAA, 0x00, 0x00, 0x5F, 0xAA, 0x00, 0x00);
    }
}
