.version 2
init
{
    init_00()
    {
        door_aot_se(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 4, 0, -6921, -6976, 1100, 1800, -1630, -1800, -8424, 280, 3, 16, 0, 1, 22, 5, 0, 0, UNLOCKED, 0);
        door_aot_se(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 4, 0, 9179, -1776, 1100, 2300, -26597, 0, -25166, 0, 3, 11, 3, 0, 22, 4, 0, 0, UNLOCKED, 0);
        aot_set(4, SCE_STATUS, SAT_PL | SAT_MANUAL | SAT_UNDER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (game.player == 0)
        {
            if (bits[4][31] == 0)
            {
                bits[30][0] = 1;
                rbj_reset();
            }
            else
            {
                bits[30][1] = 1;
                rbj_reset();
            }
        }
        obj_model_set(0, 1, 130, 4, 4, 0, 4, 10, 26, -11200, -1820, -3150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        obj_model_set(2, 0, 0, 0, 0, 0, 0, 10, 0, 9710, -15750, 1015, 0, -2048, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (game.player == 0)
        {
            obj_model_set(8, 0, 0, 0, 0, 0, 0, 10, 16, -10982, -11750, 1231, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            item_aot_set(10, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 6, 0, -11982, 681, 1800, 1800, ITEM_121, 1, 183, 8, 0);
        }
        else
        {
            obj_model_set(5, 0, 0, 0, 0, 0, 0, 10, 16, -10982, -11750, 1231, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            item_aot_set(10, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 6, 0, -11982, 681, 1800, 1800, ITEM_121, 1, 183, 5, 0);
        }
        if (game.player == 0)
        {
            obj_model_set(7, 0, 0, 0, 0, 0, 0, 10, 16, -9174, -10800, -1422, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            item_aot_set(11, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 6, 0, -10482, -2119, 1800, 1800, ITEM_EAGLEMEDAL, 1, 184, 7, 1);
        }
        else
        {
            obj_model_set(4, 0, 0, 0, 0, 0, 0, 10, 16, -9174, -10800, -1422, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            item_aot_set(11, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 6, 0, -10482, -2119, 1800, 1800, ITEM_EAGLEMEDAL, 1, 184, 4, 1);
        }
        return 0;
    }
}

main
{
    main_00()
    {
        if (bits[4][31] == 0)
        {
            bits[4][32] = 1;
            if (game.scenario == 0)
            {
                aot_set(2, SCE_EVENT, SAT_PL | SAT_UNDER, 4, 0, 5140, 10127, 1800, 4200, 255, 0, I_GOSUB, main_02, 0, 0);
            }
            else
            {
                aot_set(2, SCE_EVENT, SAT_PL | SAT_UNDER, 4, 0, 5140, 10127, 1800, 4200, 255, 0, I_GOSUB, main_02, 0, 0);
            }
            sce_em_set(0, 0, ENEMY_ANNETTEBIRKIN1, 0, 8, 5, 0, 0, 255, 20000, 20000, 20000, 0, 0, 0);
            obj_model_set(10, 0, 0, 0, 0, 0, 0, 10, 0, 20000, 20000, 20000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        if (bits[1][3] == 1)
        {
            if (game.last_room == 0x410)
            {
                sce_em_set(0, 255, ENEMY_ADAWONG1, 0, 12, 4, 31, 0, 255, -4679, -7200, -5074, 0, 0, 0);
            }
            else
            {
                sce_em_set(0, 255, ENEMY_ADAWONG1, 0, 12, 4, 31, 0, 255, 8123, -7200, -1147, 2880, 0, 0);
            }
        }
        if (bits[4][31] == 0)
        {
            obj_model_set(3, 0, 0, 0, 0, 0, 0, 10, 0, 20000, 20000, 20000, -530, -462, -367, 0, 0, 0, 0, 0, 0, 0, 0);
            obj_model_set(4, 0, 0, 0, 0, 49920, 0, 10, 0, -30, -20, -68, 384, -1536, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            obj_model_set(5, 0, 0, 0, 0, 50176, 0, 10, 0, -32, -35, 3, 0, 0, 1244, 0, 0, 0, 0, 0, 0, 0, 0);
            obj_model_set(6, 0, 0, 0, 0, 50176, 0, 10, 0, -98, -34, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else
        {
            aot_set(3, SCE_FLAG_CHG, SAT_PL | SAT_FRONT, 4, 0, 9669, 3786, 1800, 2000, 10, 0, 50, 0, 1, 0);
            obj_model_set(9, 0, 0, 0, 0, 0, 0, 10, 0, 20000, 20000, 2000, 1024, 0, -1024, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        if (bits[4][30] == 0)
        {
            cut_be_set(0, 2, 0);
            sca_id_set(0, 0, 0);
            sca_id_set(25, 16, 252);
        }
        else
        {
            cut_be_set(0, 2, 1);
            sca_id_set(0, 0, 222);
            sca_id_set(25, 0, 0);
        }
        if (bits[4][32] == 0)
        {
            aot_reset(1, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 35, 0, 0, 0, 0, 255);
            bits[5][4] = 1;
            evt_exec(255, I_GOSUB, main_0D);
        }
        else
        {
            aot_reset(1, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_18, 0, 0);
            aot_reset(3, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
            bits[5][4] = 1;
            evt_exec(255, I_GOSUB, main_0E);
        }
        if (arr[32] == 14)
        {
            aot_reset(10, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 39, 0, 0, 0, 0, 255);
            aot_reset(11, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 38, 0, 0, 0, 0, 255);
        }
        aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_17, 0, 0);
        evt_exec(255, I_GOSUB, main_0C);
        evt_exec(255, I_GOSUB, main_16);
        main_0B();
        return 0;
    }

    main_01()
    {
        if (arr[2] == 50)
        {
            evt_exec(255, I_GOSUB, main_0F);
        }
        return 0;
    }

    main_02()
    {
        bits[2][7] = 1;
        game.cutscene = 1;
        bits[4][31] = 1;
        if (game.scenario == 0)
        {
            sce_bgmtbl_set(0, 9, 4, 6164, 32768);
        }
        else
        {
            sce_bgmtbl_set(0, 9, 4, 6164, 32768);
        }
        aot_reset(2, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        work_set(WK_PLAYER, 0);
        if (&7 ? 4095)
        {
            bits[5][12] = 1;
            weapon_chg(0);
            main_03();
        }
        evt_exec(255, I_GOSUB, main_06);
        evt_exec(255, I_GOSUB, main_07);
        cut_chg(13);
        sleep(10, 70);
        sce_bgm_control(2, 1, 0, 100, 64);
        cut_chg(9);
        sleep(10, 2);
        sleep(10, 30);
        sleep(10, 45);
        cut_chg(11);
        sleep(10, 2);
        xa_vol(110);
        xa_on(0, 4);
        message_on(0, 0, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 4);
        cut_chg(9);
        sleep(10, 2);
        xa_on(0, 18);
        message_on(0, 1, 0, 0, 0);
        sleep(10, 119);
        message_on(0, 2, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 8);
        while (
        {
            evt_next();
        }
        cut_chg(13);
        sleep(10, 2);
        message_on(0, 3, 0, 0, 0);
        xa_on(0, 5);
        sleep(10, 21);
        message_on(0, 4, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 12);
        bits[5][6] = 1;
        cut_chg(10);
        sleep(10, 2);
        xa_on(0, 6);
        message_on(0, 5, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 16);
        message_on(0, 6, 0, 0, 0);
        xa_on(0, 7);
        sleep(10, 131);
        sleep(10, 101);
        message_on(0, 8, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 4);
        bits[5][7] = 1;
        cut_chg(13);
        sleep(10, 2);
        message_on(0, 9, 0, 0, 0);
        xa_on(0, 8);
        wsleep();
        wsleeping();
        sleep(10, 4);
        bits[5][6] = 1;
        cut_chg(9);
        sleep(10, 2);
        message_on(0, 10, 0, 0, 0);
        xa_on(0, 9);
        sleep(10, 41);
        message_on(0, 11, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        bits[5][7] = 1;
        xa_on(0, 10);
        wsleep();
        wsleeping();
        sleep(10, 5);
        bits[5][6] = 1;
        message_on(0, 12, 0, 0, 0);
        xa_on(0, 11);
        wsleep();
        wsleeping();
        message_on(0, 13, 0, 0, 0);
        xa_on(0, 12);
        sleep(10, 139);
        message_on(0, 14, 0, 0, 0);
        wsleep();
        wsleeping();
        cut_chg(13);
        sleep(10, 2);
        message_on(0, 15, 0, 0, 0);
        xa_on(0, 13);
        wsleep();
        wsleeping();
        sleep(10, 5);
        bits[5][6] = 1;
        cut_chg(10);
        sleep(10, 2);
        message_on(0, 16, 0, 0, 0);
        xa_on(0, 14);
        sleep(10, 91);
        message_on(0, 17, 0, 0, 0);
        wsleep();
        wsleeping();
        bits[5][7] = 1;
        message_on(0, 18, 0, 0, 0);
        xa_on(0, 15);
        wsleep();
        wsleeping();
        sleep(10, 6);
        bits[5][6] = 1;
        message_on(0, 19, 0, 0, 0);
        xa_on(0, 16);
        sleep(10, 91);
        wsleep();
        wsleeping();
        sleep(10, 5);
        cut_chg(9);
        sleep(10, 2);
        message_on(0, 20, 0, 0, 0);
        xa_on(0, 17);
        sleep(10, 81);
        message_on(0, 21, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        if (game.scenario == 0)
        {
            sleep(10, 60);
            sce_fade_set(2, 2, 7, 0, 2);
            sce_bgm_control(2, 4, 0, 100, 64);
            sleep(10, 1);
            sce_bgm_control(0, 4, 1, 51, 65);
            sleep(10, 62);
            cut_chg(10);
            evt_next();
            sce_fade_set(2, 2, 7, 0, 254);
            movie_on(11);
            evt_next();
            sce_fade_adjust(2, 255, 127);
            sleep(10, 63);
            sce_bgm_control(2, 3, 0, 100, 64);
            evt_next();
            sce_bgm_control(0, 3, 1, 51, 65);
            bits[5][8] = 1;
            message_on(0, 22, 0, 0, 0);
            xa_on(0, 19);
            wsleep();
            wsleeping();
            bits[5][6] = 1;
            message_on(0, 23, 0, 0, 0);
            xa_on(0, 20);
            sleep(10, 81);
            message_on(0, 24, 0, 0, 0);
            wsleep();
            wsleeping();
            cut_chg(9);
            evt_next();
            message_on(0, 25, 0, 0, 0);
            xa_on(0, 21);
            sleep(10, 131);
            message_on(0, 26, 0, 0, 0);
            wsleep();
            wsleeping();
            bits[5][7] = 1;
            cut_chg(13);
            evt_next();
            message_on(0, 27, 0, 0, 0);
            xa_on(0, 22);
            wsleep();
            wsleeping();
            cut_chg(10);
            sleep(10, 30);
        }
        else
        {
            cut_chg(6);
            sleep(10, 80);
            cut_chg(9);
            sleep(10, 2);
            message_on(0, 29, 0, 0, 0);
            xa_vol(120);
            xa_on(0, 27);
            sleep(10, 71);
            message_on(0, 30, 0, 0, 0);
            wsleep();
            wsleeping();
            bits[5][7] = 1;
            cut_chg(13);
            sleep(10, 2);
            message_on(0, 31, 0, 0, 0);
            xa_on(0, 28);
            wsleep();
            wsleeping();
            message_on(0, 32, 0, 0, 0);
            xa_on(0, 29);
            wsleep();
            wsleeping();
        }
        sce_bgm_control(2, 5, 0, 0, 64);
        cut_chg(13);
        bits[5][2] = 1;
        sleep(10, 10);
        cut_chg(10);
        sleep(10, 2);
        xa_vol(125);
        xa_on(0, 23);
        sleep(10, 220);
        wsleep();
        wsleeping();
        cut_chg(14);
        sleep(10, 2);
        xa_vol(110);
        xa_on(0, 25);
        sleep(10, 60);
        wsleep();
        wsleeping();
        cut_chg(10);
        sleep(10, 2);
        message_on(0, 28, 0, 0, 0);
        xa_on(0, 26);
        wsleep();
        wsleeping();
        cut_chg(10);
        sleep(10, 2);
        while (
        {
            evt_next();
        }
        wsleep();
        wsleeping();
        if (game.scenario == 1)
        {
            evt_exec(255, I_GOSUB, main_08);
            sce_espr_kill(5, 15, 0, 0);
            cut_chg(12);
            evt_next();
            sce_espr_on(0, 3845, 0, 1096, 4823, -9400, 11700, 0);
            sleep(10, 100);
            sleep(10, 30);
            sce_espr_kill(5, 15, 0, 0);
        }
        cut_chg(2);
        cut_auto(1);
        bits[4][32] = 0;
        bits[5][4] = 0;
        evt_next();
        evt_next();
        sce_bgm_control(1, 0, 1, 71, 91);
        bits[5][4] = 1;
        evt_exec(255, I_GOSUB, main_0D);
        aot_reset(1, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 35, 0, 0, 0, 0, 255);
        aot_reset(3, SCE_FLAG_CHG, SAT_PL | SAT_FRONT, 10, 0, 50, 0, 1, 0);
        if (bits[5][12] == 1)
        {
            weapon_chg(3);
            main_05();
        }
        bits[5][3] = 0;
        bits[2][7] = 0;
        game.cutscene = 0;
        return 0;
    }

    main_03()
    {
        work_set(WK_OBJECT, 10);
        super_set(0, 64, 139, 20, 270, -10, -1024, -2048, 0);
        return 0;
    }

    main_04()
    {
        work_set(WK_OBJECT, 10);
        super_on(0, 64, 139, 20, 0, 14, 1, 246, 255, 0, 252, 0, 248, 0, 0);
        super_reset(0, 0, 401, 4973);
        for 16 times
        {
            speed_set(1, 100);
            speed_set(0, 100);
            speed_set(2, -40);
            speed_set(3, 150);
            speed_set(4, 120);
            add_speed();
            evt_next();
        }
        se_on(2, 275, 2564, 0, 0, 0);
        member_set(12, 32, 28);
        return 0;
    }

    main_05()
    {
        work_set(WK_OBJECT, 10);
        pos_set(0, 20000, 20000, 20000);
        return 0;
    }

    main_06()
    {
        work_set(WK_PLAYER, 0);
        pos_set(0, 5800, -7200, 11900);
        plc_dest(0, 21, 0, 2048, 128);
        while (
        {
            evt_next();
        }
        bits[5][0] = 0;
        member_set(15, 0, 8);
        se_on(2, 264, 0, -8493, -9000, 11900);
        if (bits[5][12] == 1)
        {
            plc_motion(0, 28, 64);
            evt_next();
            sce_espr_on(0, 24, 0, 1024, 4900, -9000, 11900, 0);
            nop_8a(0, 4, 0, 0, 0);
            nop_8c(0, 200, 160, 10, 0, 0, 0);
            evt_next();
            sce_espr_on(0, 280, 0, 2048, 4900, -9000, 11900, 0);
            sleep(10, 2);
            se_on(2, 265, 0, 4900, -9000, 11900);
            evt_next();
            evt_exec(255, I_GOSUB, main_04);
        }
        else
        {
            nop_8a(0, 4, 0, 0, 0);
            nop_8c(0, 140, 120, 8, 0, 0, 0);
            sce_espr_on(0, 24, 0, 1024, 5790, -8500, 11020, 0);
            plc_motion(0, 27, 64);
            sleep(10, 1);
            plc_motion(0, 27, 192);
            plc_cnt(19);
            sleep(10, 2);
            sce_espr_on(0, 280, 0, 1152, 5790, -8500, 11020, 0);
            sleep(10, 2);
        }
        sleep(10, 2);
        sleep(10, 43);
        plc_motion(2, 2, 4);
        while (
        {
            evt_next();
        }
        sleep(10, 30);
        sleep(10, 20);
        plc_motion(0, 27, 0);
        plc_neck(2, 0, 0, 100, 25, 10);
        sleep(10, 10);
        plc_neck(5, 3, 0, 0, 10, 10);
        plc_motion(0, 27, 192);
        plc_cnt(20);
        while (
        {
            evt_next();
        }
        plc_motion(2, 2, 4);
        evt_next();
        while (
        {
            evt_next();
        }
        bits[5][7] = 0;
        plc_neck(2, 0, 200, 0, 25, 10);
        sleep(10, 4);
        plc_neck(2, 0, -200, 0, 25, 10);
        sleep(10, 4);
        plc_neck(2, 0, 0, 0, 25, 10);
        sleep(10, 10);
        while (
        {
            evt_next();
        }
        evt_next();
        plc_motion(2, 2, 4);
        while (
        {
            evt_next();
        }
        bits[5][7] = 0;
        plc_motion(0, 27, 0);
        sleep(10, 20);
        plc_motion(0, 27, 192);
        plc_cnt(10);
        sleep(10, 20);
        plc_motion(2, 2, 4);
        sleep(10, 11);
        plc_neck(2, 0, 0, -100, 25, 10);
        sleep(10, 15);
        plc_neck(0, 0, 0, 0, 25, 10);
        sleep(10, 80);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 10);
        plc_neck(2, 0, -200, 100, 25, 10);
        sleep(10, 10);
        plc_neck(2, 0, 200, 100, 25, 10);
        sleep(10, 4);
        plc_neck(2, 0, -150, 200, 4, 4);
        sleep(10, 20);
        sleep(10, 130);
        plc_neck(5, 3, 0, 0, 10, 10);
        while (
        {
            evt_next();
        }
        bits[5][7] = 0;
        sleep(10, 5);
        plc_neck(2, 0, 80, 100, 5, 2);
        sleep(10, 15);
        plc_motion(0, 31, 0);
        sleep(10, 15);
        plc_neck(2, 0, -80, 0, 5, 2);
        sleep(10, 10);
        plc_motion(0, 31, 128);
        plc_cnt(5);
        plc_neck(5, 3, 0, 0, 25, 10);
        sleep(10, 30);
        plc_motion(2, 2, 4);
        if (game.scenario == 0)
        {
            while (
            {
                evt_next();
            }
            plc_motion(0, 27, 16);
            sleep(10, 30);
            plc_motion(0, 27, 192);
            plc_cnt(15);
            sleep(10, 15);
            sleep(10, 15);
            plc_motion(2, 2, 4);
            while (
            {
                evt_next();
            }
            bits[5][7] = 0;
            sleep(10, 48);
            plc_neck(2, 0, 300, 100, 25, 10);
            sleep(10, 10);
            plc_neck(2, 0, -300, 100, 25, 10);
            sleep(10, 10);
            plc_neck(2, 0, 300, 100, 25, 10);
            sleep(10, 10);
        }
        else
        {
            while (
            {
                evt_next();
            }
            pos_set(0, 5927, -7200, 11938);
            bits[5][7] = 0;
            plc_motion(0, 27, 65);
            sleep(10, 15);
            plc_motion(0, 27, 193);
            plc_cnt(15);
            sleep(10, 15);
            plc_motion(2, 2, 4);
        }
        while (
        {
            evt_next();
        }
        pos_set(0, 3742, -7200, 11900);
        member_set(15, 0, 0);
        plc_motion(10, 18, 64);
        plc_neck(5, 3, 0, 0, 0, 0);
        sleep(10, 68);
        plc_flg(1, 80);
        sleep(10, 6);
        plc_flg(1, 80);
        sleep(10, 16);
        plc_flg(1, 64);
        sleep(10, 22);
        plc_flg(1, 80);
        sleep(10, 16);
        plc_flg(1, 64);
        sleep(10, 10);
        plc_flg(1, 80);
        sleep(10, 20);
        plc_flg(1, 80);
        sleep(10, 28);
        plc_flg(1, 64);
        sleep(10, 20);
        while (
        {
            evt_next();
        }
        evt_next();
        while (
        {
            evt_next();
        }
        member_set(15, 0, 4);
        plc_motion(0, 20, 64);
        plc_neck(4, 2, 0, 0, 50, 40);
        sleep(10, 50);
        plc_motion(2, 2, 5);
        sleep(10, 20);
        if (bits[5][12] == 1)
        {
            plc_neck(1, 6063, -7200, 12300, 30, 30);
            sleep(10, 30);
            plc_dest(0, 21, 0, -336, 64);
            while (
            {
                evt_next();
            }
            bits[5][0] = 0;
            plc_neck(0, 0, 0, 0, 40, 40);
            plc_motion(1, 6, 2);
            sleep(10, 25);
            main_03();
            work_set(WK_PLAYER, 0);
            sleep(10, 30);
            plc_motion(1, 6, 193);
            sleep(10, 25);
        }
        plc_dest(0, 21, 0, 2048, 64);
        while (
        {
            evt_next();
        }
        bits[5][0] = 0;
        if (game.scenario == 1)
        {
            plc_neck(2, 0, 0, 200, 40, 40);
            sleep(10, 40);
            plc_motion(0, 30, 0);
            sleep(10, 22);
        }
        bits[5][3] = 1;
        if (game.scenario == 1)
        {
            sleep(10, 2);
            pos_set(0, 5345, -7200, 11787);
            while (
            {
                evt_next();
            }
        }
        plc_ret();
        return 0;
    }

    main_07()
    {
        work_set(WK_ENEMY, 0);
        plc_motion(2, 9, 64);
        pos_set(0, -8493, -9000, 11900);
        while (
        {
            evt_next();
        }
        sleep(10, 8);
        plc_motion(10, 29, 4);
        for 5 times
        {
            sleep(10, 9);
            se_on(2, 285, 3, 0, 0, 0);
            sleep(10, 15);
            se_on(2, 285, 3, 0, 0, 0);
            sleep(10, 6);
        }
        sleep(10, 9);
        se_on(2, 285, 3, 0, 0, 0);
        sleep(10, 6);
        plc_motion(0, 25, 0);
        plc_cnt(10);
        sleep(10, 5);
        se_on(2, 268, 3, 0, 0, 0);
        sleep(10, 10);
        bits[5][5] = 1;
        plc_motion(10, 26, 84);
        while (
        {
            evt_next();
        }
        bits[5][6] = 0;
        plc_neck(2, 0, 300, 200, 10, 10);
        plc_motion(0, 24, 1);
        sleep(10, 40);
        plc_motion(0, 24, 193);
        sleep(10, 42);
        plc_motion(0, 22, 81);
        sleep(10, 28);
        plc_neck(2, 0, 200, -100, 10, 10);
        sleep(10, 32);
        sleep(10, 8);
        plc_neck(5, 1, 0, 0, 20, 20);
        plc_motion(0, 21, 1);
        sleep(10, 12);
        plc_motion(0, 21, 193);
        plc_cnt(8);
        sleep(10, 12);
        plc_motion(0, 22, 65);
        sleep(10, 16);
        plc_motion(0, 22, 209);
        plc_cnt(9);
        sleep(10, 14);
        sleep(10, 20);
        sleep(10, 16);
        plc_motion(0, 26, 21);
        sleep(10, 17);
        plc_motion(0, 24, 1);
        sleep(10, 30);
        plc_motion(0, 24, 193);
        sleep(10, 30);
        sleep(10, 20);
        plc_motion(0, 23, 65);
        sleep(10, 20);
        plc_motion(0, 23, 193);
        plc_cnt(5);
        sleep(10, 30);
        plc_motion(0, 26, 21);
        while (
        {
            evt_next();
        }
        bits[5][6] = 0;
        sleep(10, 20);
        plc_neck(2, 0, 50, -100, 8, 10);
        sleep(10, 20);
        plc_motion(0, 22, 65);
        sleep(10, 20);
        plc_motion(0, 22, 209);
        plc_cnt(5);
        sleep(10, 40);
        plc_motion(0, 26, 21);
        sleep(10, 80);
        plc_neck(5, 1, 0, 0, 60, 60);
        sleep(10, 46);
        while (
        {
            evt_next();
        }
        bits[5][6] = 0;
        plc_neck(2, 0, 200, 100, 12, 10);
        sleep(10, 30);
        plc_neck(2, 0, -200, 100, 12, 10);
        sleep(10, 30);
        plc_motion(0, 22, 65);
        plc_neck(2, 0, 200, 100, 12, 10);
        sleep(10, 30);
        plc_neck(2, 0, -200, 100, 12, 10);
        plc_motion(0, 22, 209);
        sleep(10, 30);
        plc_neck(2, 0, 200, 100, 12, 10);
        sleep(10, 30);
        plc_motion(0, 26, 85);
        plc_neck(2, 0, 0, 50, 4, 8);
        sleep(10, 30);
        plc_motion(0, 24, 1);
        sleep(10, 40);
        plc_motion(0, 24, 193);
        sleep(10, 40);
        plc_motion(0, 22, 1);
        sleep(10, 35);
        plc_motion(0, 22, 209);
        sleep(10, 15);
        plc_neck(5, 1, 0, 0, 20, 20);
        sleep(10, 40);
        plc_motion(0, 24, 1);
        sleep(10, 40);
        plc_motion(0, 24, 193);
        sleep(10, 40);
        plc_motion(0, 26, 85);
        sleep(10, 10);
        while (
        {
            evt_next();
        }
        bits[5][6] = 0;
        sleep(10, 15);
        plc_motion(0, 24, 1);
        sleep(10, 40);
        plc_motion(0, 24, 193);
        sleep(10, 40);
        sleep(10, 20);
        plc_motion(0, 22, 1);
        sleep(10, 20);
        plc_motion(0, 22, 209);
        plc_cnt(6);
        sleep(10, 35);
        plc_motion(0, 26, 85);
        sleep(10, 30);
        while (
        {
            evt_next();
        }
        bits[5][6] = 0;
        plc_neck(3, 1, 0, 0, 10, 10);
        sleep(10, 40);
        plc_neck(5, 1, 0, 0, 20, 20);
        sleep(10, 51);
        plc_neck(2, 0, 200, 100, 12, 10);
        sleep(10, 20);
        plc_neck(2, 0, -200, 100, 12, 10);
        sleep(10, 20);
        plc_neck(2, 0, 200, 100, 12, 10);
        sleep(10, 20);
        plc_neck(2, 0, -200, 100, 12, 10);
        sleep(10, 20);
        plc_motion(0, 24, 81);
        sleep(10, 30);
        plc_motion(0, 24, 209);
        plc_cnt(15);
        sleep(10, 30);
        plc_motion(0, 26, 21);
        plc_neck(0, 0, -200, 100, 12, 10);
        plc_motion(0, 24, 1);
        sleep(10, 40);
        plc_motion(0, 24, 193);
        sleep(10, 49);
        if (game.scenario == 0)
        {
            while (
            {
                evt_next();
            }
            while (
            {
                evt_next();
            }
            bits[5][6] = 0;
            sleep(10, 40);
            plc_motion(0, 22, 17);
            sleep(10, 40);
            plc_motion(0, 22, 145);
            plc_cnt(20);
            sleep(10, 60);
            plc_neck(2, 0, -200, 100, 12, 10);
            plc_motion(0, 26, 85);
            sleep(10, 30);
            sleep(10, 50);
            plc_neck(2, 0, 200, 100, 12, 10);
            sleep(10, 30);
            plc_motion(0, 22, 17);
            plc_neck(2, 0, -200, 100, 12, 10);
            sleep(10, 30);
            plc_motion(0, 22, 145);
            plc_cnt(10);
            plc_neck(2, 0, 200, 100, 12, 10);
            sleep(10, 60);
            plc_motion(0, 26, 85);
            sleep(10, 40);
            plc_motion(0, 22, 1);
            sleep(10, 20);
            plc_motion(0, 22, 145);
            plc_cnt(5);
            sleep(10, 70);
            plc_motion(0, 26, 85);
            sleep(10, 30);
            while (
            {
                evt_next();
            }
            plc_motion(10, 25, 0);
            plc_cnt(10);
            sleep(10, 5);
            se_on(2, 268, 3, 0, 0, 0);
            sleep(10, 10);
        }
        else
        {
            while (
            {
                evt_next();
            }
            plc_motion(0, 21, 1);
            sleep(10, 40);
            plc_motion(0, 21, 129);
            sleep(10, 20);
            plc_motion(0, 26, 85);
        }
        while (
        {
            evt_next();
        }
        pos_set(0, 3742, -7200, 11900);
        member_set(15, 0, 0);
        plc_motion(10, 19, 64);
        plc_neck(5, 1, 0, 0, 0, 0);
        sleep(10, 68);
        plc_flg(1, 80);
        sleep(10, 6);
        plc_flg(1, 80);
        sleep(10, 16);
        plc_flg(1, 64);
        sleep(10, 22);
        plc_flg(1, 80);
        sleep(10, 16);
        plc_flg(1, 64);
        sleep(10, 10);
        plc_flg(1, 80);
        sleep(10, 20);
        plc_flg(1, 80);
        sleep(10, 28);
        se_on(2, 273, 3, 0, 0, 0);
        nop_8a(0, 4, 0, 0, 0);
        plc_flg(1, 64);
        sleep(10, 14);
        se_on(2, 274, 3, 0, 0, 0);
        sleep(10, 21);
        for 40 times
        {
            member_copy(16, 12);
            var_10 += C8;
            member_set2(12, 16);
            evt_next();
        }
        se_on(2, 267, 3, 0, 0, 0);
        evt_next();
        pos_set(0, 20000, 20000, 20000);
        return 0;
    }

    main_08()
    {
        work_set(WK_OBJECT, 3);
        pos_set(0, 4687, -9277, 11781);
        evt_exec(255, I_GOSUB, main_09);
        while (
        {
            evt_next();
        }
        pos_set(0, 20000, 20000, 20000);
        return 0;
    }

    main_09()
    {
        se_on(2, 15, 0, 0, 0, 0);
        se_on(2, 16, 0, 0, 0, 0);
        work_set(WK_OBJECT, 5);
        speed_set(5, 20);
        for 20 times
        {
            add_speed();
            evt_next();
        }
        for 16 times
        {
            add_speed();
            evt_next();
        }
        evt_exec(255, I_GOSUB, main_0A);
        speed_set(11, -2);
        for 8 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        return 0;
    }

    main_0A()
    {
        se_on(2, 14, 1540, 0, 0, 0);
        work_set(WK_OBJECT, 6);
        speed_set(3, -32);
        speed_set(9, -4);
        for 18 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, 8);
        for 18 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        return 0;
    }

    main_0B()
    {
        aot_set(26, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 6, 0, -12533, -1908, 1977, 5600, 33, 0, 0, 0, 0, 255);
        aot_set_4p(27, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 6, 0, -10983, -3048, -10093, -288, -7773, 1762, -8733, -848, 34, 0, 0, 0, 0, 255);
        aot_set(28, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 4, 0, 9669, 3786, 1800, 2000, 36, 0, 0, 0, 0, 255);
        if (bits[4][30] == 1)
        {
            aot_set(29, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 4, 0, -483, -628, 2577, 1500, 37, 0, 0, 0, 0, 255);
        }
        return 0;
    }

    main_0C()
    {

off_3438:
        switch (var_1A)
        {
        case 0:
        case 1:
        case 2:
        case 3:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
            sce_bgm_control(0, 0, 1, 51, 65);
            break;
        case 4:
            sce_bgm_control(0, 0, 1, 41, 65);
            break;
        case 5:
            sce_bgm_control(0, 0, 1, 31, 65);
            break;
        }
        if (bits[4][32] == 0)
        {
            switch (var_1A)
            {
            case 0:
            case 7:
                sce_bgm_control(1, 0, 1, 51, 65);
                break;
            case 1:
            case 8:
                sce_bgm_control(1, 0, 1, 71, 56);
                break;
            case 2:
                sce_bgm_control(1, 0, 1, 71, 91);
                break;
            case 3:
                sce_bgm_control(1, 0, 1, 71, 71);
                break;
            case 4:
                sce_bgm_control(1, 0, 1, 51, 65);
                break;
            case 5:
                sce_bgm_control(1, 0, 1, 41, 41);
                break;
            case 6:
                sce_bgm_control(1, 0, 1, 61, 91);
                break;
            case 9:
                sce_bgm_control(1, 0, 1, 61, 41);
                break;
            case 10:
                sce_bgm_control(1, 0, 1, 61, 101);
                break;
            case 11:
                sce_bgm_control(1, 0, 1, 51, 41);
                break;
            case 12:
            case 13:
            case 14:
                sce_bgm_control(1, 0, 1, 61, 101);
                break;
            }
        }
        else
        {
            sce_bgm_control(1, 0, 1, 1, 65);
        }
        do
        {
            evt_next();
        } while (bits[1][11] == 0);
        goto off_3438;
        return 0;
    }

    main_0D()
    {
        main_11();
        work_set(WK_OBJECT, 2);
        while (
        {
            member_copy(16, 14);
            var_10 -= 320;
            member_set2(14, 16);
            member_copy(16, 14);
            var_10 &= FFF;
            member_set2(14, 16);
            evt_next();
        }
        return 0;
    }

    main_0E()
    {
        sce_bgm_control(1, 0, 1, 1, 64);
        main_12();
        work_set(WK_OBJECT, 2);
        while (
        {
            member_copy(16, 14);
            var_10 -= 06;
            member_set2(14, 16);
            member_copy(16, 14);
            var_10 &= FFF;
            member_set2(14, 16);
            evt_next();
        }
        return 0;
    }

    main_0F()
    {
        bits[2][7] = 1;
        game.cutscene = 1;
        bits[4][32] = 1;
        bits[5][10] = 0;
        bits[5][11] = 0;
        bits[5][4] = 0;
        nop_8c(0, 90, 110, 12, 0, 80, 0);
        nop_8c(0, 90, 110, 12, 0, 120, 0);
        evt_exec(255, I_GOSUB, main_14);
        evt_exec(255, I_GOSUB, main_13);
        evt_exec(255, I_GOSUB, main_10);
        while (
        {
            evt_next();
        }
        aot_reset(1, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_18, 0, 0);
        aot_reset(3, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        sleep(10, 30);
        bits[5][3] = 0;
        bits[2][7] = 0;
        game.cutscene = 0;
        aot_on(4);
        evt_next();
        bits[5][11] = 1;
        return 0;
    }

    main_10()
    {
        work_set(WK_OBJECT, 2);
        for 50 times
        {
            member_copy(16, 14);
            var_10 -= 320;
            member_set2(14, 16);
            member_copy(16, 14);
            var_10 &= FFF;
            member_set2(14, 16);
            evt_next();
        }
        speed_set(3, -800);
        speed_set(9, 40);
        for 4 times
        {
            for 10 times
            {
                add_speed();
                member_copy(16, 14);
                var_10 &= FFF;
                member_set2(14, 16);
                evt_next();
            }
            add_aspeed();
        }
        sce_bgm_control(1, 2, 1, 1, 64);
        for 10 times
        {
            add_speed();
            member_copy(16, 14);
            var_10 &= FFF;
            member_set2(14, 16);
            evt_next();
        }
        sce_bgm_control(2, 1, 1, 80, 64);
        for 14 times
        {
            for 10 times
            {
                add_speed();
                member_copy(16, 14);
                var_10 &= FFF;
                member_set2(14, 16);
                evt_next();
            }
            add_aspeed();
        }
        speed_set(3, -20);
        speed_set(9, 1);
        for 14 times
        {
            for 2 times
            {
                add_speed();
                member_copy(16, 14);
                var_10 &= FFF;
                member_set2(14, 16);
                evt_next();
            }
            add_aspeed();
        }
        bits[5][4] = 1;
        evt_exec(255, I_GOSUB, main_0E);
        bits[5][3] = 1;
        return 0;
    }

    main_11()
    {
        if (bits[5][9] == 1)
        {
            sce_espr_kill(22, 20, 0, 0);
            evt_next();
        }
        bits[5][9] = 1;
        sce_espr3d_on(0, 1046, 0, 4096, 9600, -9450, 5010, 0, 1024, 0, 0);
        return 0;
    }

    main_12()
    {
        if (bits[5][9] == 1)
        {
            sce_espr_kill(22, 4, 0, 0);
            evt_next();
        }
        bits[5][9] = 1;
        sce_espr3d_on(0, 5142, 0, 4096, 9600, -9450, 5010, 0, 1024, 0, 0);
        return 0;
    }

    main_13()
    {
        work_set(WK_PLAYER, 0);
        if (game.player == 1)
        {
            pos_set(0, 9187, -7200, 4704);
            member_set(15, 0, 0);
        }
        else
        {
            pos_set(0, 11305, -7200, 4649);
            member_set(15, 0, 0);
        }
        sleep(10, 20);
        if (game.player == 1)
        {
            plc_motion(0, 15, 0);
        }
        else
        {
            plc_motion(0, 15, 1);
        }
        sleep(10, 30);
        if (game.player == 1)
        {
            plc_motion(0, 16, 0);
        }
        else
        {
            plc_motion(0, 16, 1);
        }
        sleep(10, 28);
        se_on(2, 266, 1, 0, 0, 0);
        sleep(10, 22);
        if (game.player == 1)
        {
            plc_motion(0, 17, 0);
        }
        else
        {
            plc_motion(0, 17, 1);
        }
        sleep(10, 18);
        se_on(2, 266, 1, 0, 0, 0);
        sleep(10, 15);
        sleep(10, 12);
        plc_cnt(50);
        plc_motion(0, 16, 192);
        sleep(10, 50);
        plc_cnt(30);
        plc_motion(0, 15, 192);
        sleep(10, 30);
        bits[5][10] = 1;
        plc_ret();
        return 0;
    }

    main_14()
    {
        work_set(WK_OBJECT, 9);
        pos_set(0, 10067, -9000, 4699);
        sleep(10, 20);
        sleep(10, 30);
        speed_set(3, 0);
        speed_set(9, 1);
        for 10 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(3, 10);
        speed_set(9, 1);
        for 5 times
        {
            add_speed();
            evt_next();
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, 2);
        for 23 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, -10);
        for 5 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        while (
        {
            sleep(10, 17);
            speed_set(3, 32);
            speed_set(9, 2);
            for 10 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
            speed_set(9, -8);
            for 4 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
        }
        while (
        {
            evt_next();
        }
        pos_set(0, 20000, 20000, 20000);
        return 0;
    }

    main_15()
    {
        evt_next();

off_38F9:
        work_set(WK_OBJECT, 1);
        if (arr[26] == 0)
        {
            pos_set(0, -2000, -1620, -20200);
        }
        else
        {
            if (arr[26] == 7)
            {
                pos_set(0, -2000, -1620, -20200);
            }
            else
            {
                pos_set(0, 20000, 20000, 20000);
            }
        }
        evt_next();
        while (
        {
            evt_next();
        }
        goto off_38F9;
        return 0;
    }

    main_16()
    {
        evt_next();

off_394B:
        work_set(WK_OBJECT, 0);
        switch (var_1A)
        {
        case 0:
        case 7:
        case 9:
            member_set(13, 32, 78);
            break;
        case 13:
            member_set(13, 50, 231);
            break;
        default:
            member_set(13, 178, 243);
            break;
        }
        evt_next();
        while (
        {
            evt_next();
        }
        goto off_394B;
        return 0;
    }

    main_17()
    {
        message_on(0, 40, 0, 0, 255);
        evt_next();
        if (input.question == 0)
        {
            se_on(4, 6, 0, 0, 0, 0);
            aot_reset(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 162, 249, 248, 248, 24, 223);
            aot_on(0);
            evt_next();
            aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_17, 0, 0);
        }
        else
        {
            se_on(4, 5, 0, 0, 0, 0);
        }
        return 0;
    }

    main_18()
    {
        message_on(0, 41, 0, 0, 255);
        evt_next();
        if (input.question == 0)
        {
            se_on(4, 6, 0, 0, 0, 0);
            aot_reset(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 27, 152, 0, 0, 178, 157);
            aot_on(1);
            evt_next();
            aot_reset(1, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_18, 0, 0);
        }
        else
        {
            se_on(4, 5, 0, 0, 0, 0);
        }
        return 0;
        db(0xB0, 0x78);
    }
}
