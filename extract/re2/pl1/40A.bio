.version 2
init
{
    init_00()
    {
        door_aot_se(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, 2000, -22180, 5100, 1800, 3914, 0, -20802, 3144, 3, 16, 2, 0, 43, 0, 0, 0, UNLOCKED, 0);
        door_aot_se(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -8522, -2619, 1800, 3400, -10359, -1800, 1460, -64, 3, 8, 3, 1, 28, 0, 0, 0, UNLOCKED, 0);
        if (bits[29][3] == 0)
        {
            bits[5][31] = 1;
        }
        if (bits[4][51] == 0 && bits[5][31] == 1)
        {
            if (game.player == 0)
            {
                sce_em_set(0, 255, ENEMY_ADAWONG1, 0, 8, 0, 0, 0, 0, -261, -1800, -7703, -3264, 0, 0);
            }
            else
            {
                if (game.scenario == 0)
                {
                    sce_em_set(0, 255, ENEMY_SHERRYWITHPENDANT, 0, 0, 0, 0, 0, 0, 7770, -1800, -12642, 3072, 0, 0);
                }
            }
            sce_em_set(0, 0, ENEMY_ALLIGATOR, 0, 0, 1, 22, 0, 0, 5706, 3000, -5316, 1024, 0, 0);
        }
        bits[4][32] = 0;
        return 0;
        db(0x00, 0x00);
    }
}

main
{
    main_00()
    {
        if (bits[1][3] == 1)
        {
            if (game.last_room == 0x408)
            {
                sce_em_set(0, 255, ENEMY_SHERRYWITHPENDANT, 0, 4, 1, 32, 0, 255, -8829, -1800, 417, 1904, 0, 0);
            }
            else
            {
                sce_em_set(0, 255, ENEMY_SHERRYWITHPENDANT, 0, 4, 1, 32, 0, 255, 5556, -1800, -22220, -2921, 0, 0);
            }
        }
        if (game.scenario == 1)
        {
            if (bits[3][35] == 1)
            {
                bits[3][35] = 0;
            }
        }
        main_05();
        main_06();
        return 0;
    }

    main_01()
    {
        if (bits[1][29] == 1 && bits[5][16] == 0)
        {
            bits[5][16] = 1;
            evt_exec(255, I_GOSUB, main_0F);
        }
        return 0;
    }

    main_02()
    {
        aot_reset(5, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        bits[4][51] = 1;
        bits[2][7] = 1;
        game.cutscene = 1;
        aot_reset(2, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_09, 0, 0);
        if (game.scenario == 0)
        {
            evt_exec(255, I_GOSUB, main_04);
        }
        evt_exec(255, I_GOSUB, main_03);
        cut_chg(10);
        sleep(10, 45);
        if (game.scenario == 0)
        {
            cut_chg(12);
            sleep(10, 60);
            cut_chg(10);
            sleep(10, 2);
            wsleep();
            wsleeping();
        }
        while (
        {
            sleep(10, 1);
        }
        sleep(10, 8);
        nop_8c(0, 100, 220, 10, 0, 0, 0);
        nop_8c(0, 200, 100, 10, 0, 10, 0);
        evt_exec(255, I_GOSUB, main_1F);
        evt_exec(255, I_GOSUB, main_0B);
        evt_exec(255, I_GOSUB, main_0C);
        sleep(10, 40);
        aot_reset(4, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_1A, 0, 0);
        game.cutscene = 0;
        return 0;
    }

    main_03()
    {
        work_set(WK_PLAYER, 0);
        pos_set(0, 2958, -1800, -25874);
        member_set(15, 183, 253);
        plc_dest(0, 4, 10, 3640, -25016);
        while (
        {
            sleep(10, 1);
        }
        bits[5][10] = 0;
        if (game.scenario == 0)
        {
            plc_motion(0, 15, 64);
            sleep(10, 1);
            plc_flg(1, 65);
            plc_neck(5, 2, 0, 0, 60, 60);
            sleep(10, 12);
            while (
            {
                evt_next();
            }
            while (
            {
                evt_next();
            }
            sleep(10, 1);
            message_on(0, 9, 0, 0, 0);
            xa_on(0, 40);
            wsleep();
            wsleeping();
            plc_motion(0, 15, 193);
            sleep(10, 17);
            sleep(10, 30);
        }
        else
        {
            sleep(10, 17);
            sleep(10, 30);
        }
        plc_neck(5, 3, 0, 0, 60, 60);
        bits[5][11] = 1;
        sleep(10, 46);
        member_copy(16, 0);
        var_10 |= 02;
        member_set2(0, 16);
        member_copy(16, 0);
        var_10 |= 08;
        member_set2(0, 16);
        plc_motion(10, 18, 64);
        plc_neck(2, 0, 400, 200, 60, 40);
        se_on(4, 256, 1, 0, 0, 0);
        for 10 times
        {
            member_copy(16, 15);
            var_10 += 40;
            member_set2(15, 16);
            member_copy(16, 11);
            var_10 -= 12C;
            member_set2(11, 16);
            evt_next();
        }
        for 20 times
        {
            plc_motion(10, 18, 64);
            plc_cnt(8);
            member_copy(16, 11);
            var_10 -= 12C;
            member_set2(11, 16);
            member_copy(16, 13);
            var_10 -= 14;
            member_set2(13, 16);
            evt_next();
        }
        plc_neck(0, 0, 0, 0, 60, 40);
        pos_set(0, -3413, -1800, -25554);
        member_set(15, 0, 255);
        member_copy(16, 0);
        var_10 &= FFF5;
        member_set2(0, 16);
        pos_set(0, -9600, -1800, -25800);
        plc_motion(1, 6, 192);
        evt_next();
        plc_stop();
        while (
        {
            evt_next();
        }
        plc_neck(4, 3, 0, 0, 70, 70);
        sleep(10, 60);
        plc_motion(1, 6, 208);
        sleep(10, 50);
        bits[5][17] = 1;
        plc_dest(0, 8, 10, -10800, -25800);
        while (
        {
            evt_next();
        }
        bits[5][10] = 0;
        plc_dest(0, 21, 10, 2048, 128);
        while (
        {
            evt_next();
        }
        bits[5][10] = 0;
        plc_ret();
        bits[2][7] = 0;
        return 0;
    }

    main_04()
    {
        work_set(WK_SPLAYER, 0);
        plc_motion(0, 0, 64);
        evt_next();
        plc_stop();
        return 0;
    }

    main_05()
    {
        if (bits[29][16] == 1)
        {
            cut_replace(6, 13);
            cut_replace(7, 14);
            sca_id_set(0, 0, 208);
        }
        else
        {
            sca_id_set(0, 0, 0);
        }
        mizu_div_set(2);
        obj_model_set(0, 1, 130, 4, 4, 0, 0, 10, 26, -3600, -1620, -21600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (bits[4][156] == 0 && bits[29][3] == 0)
        {
            obj_model_set(1, 0, 0, 0, 0, 0, 0, 10, 0, -21320, -1800, -9268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (bits[4][155] == 1)
            {
                work_set(WK_OBJECT, 1);
                pos_set(0, -22816, -1984, -9500);
                dir_set(0, 1680, 0, -1024);
            }
        }
        if (bits[4][51] == 0 && bits[29][3] == 0)
        {
            obj_model_set(2, 0, 0, 0, 0, 0, 0, 10, 16, 20000, 20000, 20000, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aot_set_4p(5, SCE_EVENT, SAT_PL | SAT_UNDER, 1, 0, 4175, -28295, -400, -21700, 3700, -21700, 8800, -28600, 255, 0, I_GOSUB, main_02, 0, 0);
        }
        else
        {
            obj_model_set(2, 0, 0, 0, 0, 0, 0, 10, 16, 1836, -1800, -21254, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        aot_set(2, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -22000, -9175, 2350, 2350, 255, 0, I_GOSUB, main_09, 0, 0);
        aot_reset(2, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 2, 0, 0, 0, 0, 255);
        if (bits[4][156] == 1)
        {
            aot_reset(2, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        }
        if (bits[29][3] == 1)
        {
            aot_reset(2, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        }
        if (bits[4][155] == 1)
        {
            aot_reset(2, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
            aot_set(3, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 129, -2300, -200, 1900, 1600, 5, 0, 0, 0, 0, 255);
        }
        aot_set(4, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, 6700, -23638, 1100, 1600, 255, 0, I_GOSUB, main_1A, 0, 0);
        aot_reset(4, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_set(6, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -27322, 1281, 5000, 1300, 0, 0, 0, 0, 0, 0);
        if (bits[29][16] == 1)
        {
            aot_reset(6, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 4, 0, 0, 0, 0, 255);
        }
        else
        {
            aot_reset(6, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        }
        sca_id_set(12, 0, 0);
        sca_id_set(14, 0, 0);
        evt_exec(255, I_GOSUB, main_16);
        evt_exec(255, I_GOSUB, main_19);
        return 0;
    }

    main_06()
    {
        return 0;
    }

    main_07()
    {
        aot_reset(2, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        evt_exec(255, I_GOSUB, main_08);
        return 0;
    }

    main_08()
    {
        work_set(WK_OBJECT, 3);
        speed_set(0, -10);
        speed_set(6, -9);
        sca_id_set(12, 0, 128);
        se_on(2, 268, 772, 0, 0, 0);
        for 12 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(6, 8);
        for 3 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        sca_id_set(12, 0, 64);
        sca_id_set(14, 0, 0);
        return 0;
    }

    main_09()
    {
        aot_reset(2, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        se_on(2, 275, 260, 0, 0, 0);
        evt_exec(255, I_GOSUB, main_0A);
        return 0;
    }

    main_0A()
    {
        work_set(WK_OBJECT, 1);
        bits[5][1] = 1;
        member_set(14, 0, 0);
        member_set(15, 32, 1);
        member_set(16, 0, 0);
        speed_set(1, -8);
        speed_set(11, -4);
        speed_set(0, -40);
        for 23 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        member_set(16, 0, 252);
        se_on(2, 267, 260, 0, 0, 0);
        speed_set(3, 64);
        speed_set(4, -24);
        speed_set(5, 0);
        speed_set(11, 0);
        speed_set(0, -36);
        speed_set(1, 0);
        for 12 times
        {
            add_speed();
            sleep(10, 1);
        }
        speed_set(4, 0);
        for 4 times
        {
            add_speed();
            sleep(10, 1);
        }
        speed_set(0, 0);
        speed_set(4, 0);
        speed_set(3, 64);
        speed_set(9, -4);
        speed_set(2, -26);
        speed_set(8, 2);
        for 8 times
        {
            add_speed();
            add_aspeed();
            sleep(10, 1);
        }
        for 8 times
        {
            add_speed();
            sleep(10, 1);
        }
        aot_set(3, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 129, -2300, -200, 1900, 1600, 5, 0, 0, 0, 0, 255);
        bits[5][0] = 1;
        bits[4][155] = 1;
        return 0;
    }

    main_0B()
    {
        work_set(WK_ENEMY, 0);
        sce_bgm_control(0, 1, 0, 120, 64);
        member_copy(16, 23);
        var_10 |= 01;
        member_set2(23, 16);
        evt_next();
        pos_set(0, 4557, -1800, -18237);
        bits[5][2] = 1;
        se_on(2, 266, 3, 0, 0, 0);
        while (
        {
            if (bits[7][0] == 1)
            {
                bits[5][20] = 1;
                sce_bgm_control(0, 5, 0, 0, 0);
            }
            else
            {
                if (bits[5][21] == 0)
                {
                    if (arr[26] == 9)
                    {
                        bits[5][21] = 1;
                        bits[2][7] = 1;
                        evt_exec(255, I_GOSUB, main_0D);
                        sce_bgm_control(0, 5, 0, 0, 0);
                    }
                }
                else
                {
                    if (game.cutscene == 0)
                    {
                        bits[5][20] = 1;
                        bits[2][7] = 0;
                        aot_reset(6, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 4, 0, 0, 0, 0, 255);
                    }
                }
            }
            evt_next();
        }
        if (bits[7][0] == 1)
        {
            bits[2][7] = 1;
        }
        do
        {
            evt_next();
        } while (bits[5][30] == 0);
        bits[2][7] = 0;
        aot_reset(3, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        return 0;
    }

    main_0C()
    {
        work_set(WK_OBJECT, 2);
        while (
        {
            evt_next();
        }
        pos_set(0, 2636, -5150, -21254);
        speed_set(1, 100);
        speed_set(7, 10);
        se_on(2, 274, 516, 0, 0, 0);
        for 10 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        for 10 times
        {
            add_speed();
            evt_next();
        }
        main_17();
        aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_1D, 0, 0);
        aot_reset(1, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_1E, 0, 0);
        while (
        {
            evt_next();
        }
        member_set(11, 44, 7);
        return 0;
    }

    main_0D()
    {
        cut_replace(6, 13);
        cut_replace(7, 14);
        sca_id_set(0, 0, 208);
        bits[29][16] = 1;
        nop_8a(0, 5, 0, 170, 0);
        nop_8c(0, 220, 140, 20, 0, 170, 0);
        sleep(10, 170);
        for 6 times
        {
            main_0E();
        }
        return 0;
    }

    main_0E()
    {
        sce_espr_on(0, 4100, 0, 3584, -24200, -3500, 1300, 824);
        sce_espr_on(0, 2052, 0, 4096, -23800, -2000, 1400, 474);
        sleep(10, 2);
        sce_espr_on(0, 2052, 0, 4096, -25500, -3800, 1300, 1024);
        evt_next();
        sce_espr_on(0, 2052, 0, 4608, -23800, -2000, 1400, 474);
        evt_next();
        sce_espr_on(0, 4100, 0, 2048, -24200, -4400, 1350, 1124);
        evt_next();
        sce_espr_on(0, 4100, 0, 8192, -25400, -4000, 1300, 974);
        sleep(10, 2);
        sce_espr_on(0, 2052, 0, 5120, -23800, -3500, 1300, 1074);
        sleep(10, 2);
        sce_espr_on(0, 4, 0, 8704, -24200, -3000, 1500, 1524);
        sce_espr_on(0, 4100, 0, 7680, -25000, -2400, 1300, 1024);
        sleep(10, 5);
        return 0;
    }

    main_0F()
    {
        evt_next();
        switch (var_1A)
        {
        case 0:
        case 1:
        case 2:
            main_10();
            break;
        case 3:
        case 4:
        case 5:
        case 6:
            main_12();
            break;
        case 7:
        case 8:
        case 9:
            main_14();
            break;
        }
        bits[5][16] = 0;
        return 0;
    }

    main_10()
    {
        main_11();
        sleep(10, 1);
        main_11();
        sleep(10, 4);
        se_on(2, 269, 1, 0, 0, 0);
        main_11();
        sleep(10, 3);
        main_11();
        sleep(10, 4);
        main_11();
        return 0;
    }

    main_11()
    {
        sce_rnd();
        copy(6, 29);
        copy(16, 6);
        var_10 &= FFF;
        copy(6, 16);
        copy(16, 6);
        var_10 -= 66CE;
        copy(6, 16);
        sce_rnd();
        copy(5, 29);
        copy(16, 5);
        var_10 &= 3FFF;
        copy(5, 16);
        copy(16, 5);
        var_10 -= 4A38;
        copy(5, 16);
        work_copy(6, 16, 1);
        work_copy(5, 8, 1);
        sce_espr_on(0, 25, 0, 1536, 0, -5400, 0, 0);
        return 0;
    }

    main_12()
    {
        main_13();
        sleep(10, 1);
        main_13();
        sleep(10, 4);
        se_on(2, 269, 1, 0, 0, 0);
        main_13();
        sleep(10, 3);
        main_13();
        sleep(10, 4);
        main_13();
        return 0;
    }

    main_13()
    {
        sce_rnd();
        copy(5, 29);
        copy(16, 5);
        var_10 &= FFF;
        copy(5, 16);
        copy(16, 5);
        var_10 -= 66CE;
        copy(5, 16);
        sce_rnd();
        copy(6, 29);
        copy(16, 6);
        var_10 &= 7FFF;
        copy(6, 16);
        copy(16, 6);
        var_10 -= 559E;
        copy(6, 16);
        work_copy(6, 16, 1);
        work_copy(5, 8, 1);
        sce_espr_on(0, 25, 0, 1536, 0, -5400, 0, 0);
        return 0;
    }

    main_14()
    {
        main_15();
        sleep(10, 1);
        main_15();
        sleep(10, 4);
        se_on(2, 269, 1, 0, 0, 0);
        main_15();
        sleep(10, 3);
        main_15();
        sleep(10, 4);
        main_15();
        return 0;
    }

    main_15()
    {
        sce_rnd();
        copy(5, 29);
        copy(16, 5);
        var_10 &= 3FFF;
        copy(5, 16);
        copy(16, 5);
        var_10 -= 61A8;
        copy(5, 16);
        sce_rnd();
        copy(6, 29);
        copy(16, 6);
        var_10 &= FFF;
        copy(6, 16);
        copy(16, 6);
        var_10 -= ABE;
        copy(6, 16);
        work_copy(6, 16, 1);
        work_copy(5, 8, 1);
        sce_espr_on(0, 25, 0, 1536, 0, -5400, 0, 0);
        return 0;
    }

    main_16()
    {
        if (bits[5][18] == 1)
        {
            sce_espr_kill(22, 0, 0, 0);
            sce_espr_kill(22, 4, 0, 0);
        }
        sce_espr3d_on(0, 4118, 0, 2048, -8208, -3654, 270, 0, 1024, 0, 0);
        sce_espr3d_on(0, 4118, 0, 2048, 7074, -3690, -23148, 0, 1024, 0, 0);
        sce_espr3d_on(0, 5142, 0, 2048, -21534, -3978, -7800, 0, 1024, 0, 0);
        bits[5][19] = 0;
        return 0;
    }

    main_17()
    {
        sce_espr_kill(22, 16, 0, 0);
        sce_espr_kill(22, 20, 0, 0);
        sce_espr3d_on(0, 22, 0, 2048, -8208, -3528, 270, 0, 1024, 0, 0);
        sce_espr3d_on(0, 22, 0, 2048, 7074, -3816, -23148, 0, 1024, 0, 0);
        sce_espr3d_on(0, 1046, 0, 2048, -21534, -3978, -7800, 0, 1024, 0, 0);
        bits[5][19] = 1;
        evt_exec(255, I_GOSUB, main_18);
        bits[5][18] = 1;
        return 0;
    }

    main_18()
    {
        while (
        {
            sce_espr_kill(22, 5, 0, 0);
            sce_espr3d_on(0, 1302, 0, 2048, -21534, -3978, -7800, 0, 1024, 0, 0);
            sleep(10, 2);
            sce_espr_kill(22, 5, 0, 0);
            sce_espr3d_on(0, 1302, 0, 4608, -21534, -3978, -7800, 0, 1024, 0, 0);
            sleep(10, 2);
            sce_espr_kill(22, 5, 0, 0);
            sce_espr3d_on(0, 1302, 0, 5120, -21534, -3978, -7800, 0, 1024, 0, 0);
            sleep(10, 2);
            sce_espr_kill(22, 5, 0, 0);
            sce_espr3d_on(0, 1302, 0, 4608, -21534, -3978, -7800, 0, 1024, 0, 0);
            sleep(10, 2);
        }
        return 0;
    }

    main_19()
    {

off_3124:
        light_color_set2(5, 0, 78, 168, 58);
        while (
        {
            light_kido_set2(0, 5, 0, 2000);
            evt_next();
            light_kido_set2(0, 5, 0, 3000);
            evt_next();
            light_kido_set2(0, 5, 0, 4000);
            evt_next();
            light_kido_set2(0, 5, 0, 3000);
            evt_next();
        }
        light_color_set2(5, 0, 168, 48, 28);
        while (
        {
            light_kido_set2(0, 5, 0, 2000);
            evt_next();
            light_kido_set2(0, 5, 0, 3000);
            evt_next();
            light_kido_set2(0, 5, 0, 4000);
            evt_next();
            light_kido_set2(0, 5, 0, 5000);
            evt_next();
            light_kido_set2(0, 5, 0, 6000);
            evt_next();
            light_kido_set2(0, 5, 0, 5000);
            evt_next();
            light_kido_set2(0, 5, 0, 4000);
            evt_next();
            light_kido_set2(0, 5, 0, 3000);
            evt_next();
        }
        goto off_3124;
        return 0;
    }

    main_1A()
    {
        aot_reset(4, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        message_on(0, 1, 0, 0, 255);
        evt_next();
        if (input.question == 0)
        {
            se_on(2, 272, 0, 6771, -2800, -22431);
            evt_next();
            se_on(2, 273, 0, 6771, -2800, -22431);
            main_16();
            aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_1B, 0, 0);
            aot_reset(1, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_1C, 0, 0);
        }
        else
        {
            se_on(4, 5, 0, 0, 0, 0);
            aot_reset(4, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_1A, 0, 0);
        }
        return 0;
    }

    main_1B()
    {
        aot_reset(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 74, 15, 0, 0, 190, 174);
        if (game.scenario == 0)
        {
            if (bits[7][0] == 1)
            {
                bits[29][3] = 1;
            }
        }
        if (bits[5][30] == 1)
        {
            bits[4][156] = 1;
            bits[4][155] = 0;
        }
        aot_on(0);
        if (game.player == 0)
        {
            sce_bgmtbl_set(0, 10, 4, 255, 0);
        }
        else
        {
            sce_bgmtbl_set(0, 10, 4, 255, 0);
        }
        return 0;
    }

    main_1C()
    {
        aot_reset(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 137, 215, 248, 248, 180, 5);
        if (game.scenario == 0)
        {
            if (bits[7][0] == 1)
            {
                bits[29][3] = 1;
            }
        }
        if (bits[5][30] == 1)
        {
            bits[4][156] = 1;
            bits[4][155] = 0;
        }
        aot_on(1);
        if (game.player == 0)
        {
            sce_bgmtbl_set(0, 10, 4, 255, 0);
        }
        else
        {
            sce_bgmtbl_set(0, 10, 4, 255, 0);
        }
        return 0;
    }

    main_1D()
    {
        aot_reset(0, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        message_on(0, 8, 0, 0, 255);
        evt_next();
        evt_next();
        aot_reset(0, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_1D, 0, 0);
        return 0;
    }

    main_1E()
    {
        aot_reset(1, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        se_on(2, 278, 0, 6771, -2800, -22431);
        message_on(0, 0, 0, 0, 255);
        evt_next();
        aot_reset(1, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 255, 0, I_GOSUB, main_1E, 0, 0);
        return 0;
    }

    main_1F()
    {
        for 3 times
        {
            sce_espr_on(0, 26, 0, 9496, 3800, -1700, -17700, 2400);
            sce_espr_on(0, 26, 0, 9496, 5000, -1700, -19000, 1800);
            sce_espr_on(0, 26, 0, 9496, 6400, -1700, -19000, 3800);
            sleep(10, 2);
            sce_espr_on(0, 26, 0, 9496, 5200, -1700, -18400, 4600);
            sce_espr_on(0, 26, 0, 9496, 3400, -1700, -17500, 6300);
            sleep(10, 2);
            sce_espr_on(0, 26, 0, 9496, 5200, -1700, -18400, 4600);
            sce_espr_on(0, 26, 0, 9496, 3400, -1700, -17500, 6300);
            sleep(10, 2);
        }
        for 2 times
        {
            sce_espr_on(0, 26, 0, 10264, 3400, -1700, -17700, 2400);
            sce_espr_on(0, 26, 0, 10264, 4600, -1700, -19000, 1800);
            sce_espr_on(0, 26, 0, 10264, 6000, -1700, -19000, 3800);
            sleep(10, 2);
            sce_espr_on(0, 26, 0, 10264, 4800, -1700, -18400, 4600);
            sce_espr_on(0, 26, 0, 10264, 3000, -1700, -17500, 6300);
            sleep(10, 2);
            sce_espr_on(0, 26, 0, 10264, 4800, -1700, -18400, 4600);
            sce_espr_on(0, 26, 0, 10264, 3000, -1700, -17500, 6300);
            sleep(10, 2);
        }
        sce_espr_on(0, 26, 0, 10264, 3000, -1700, -17700, 2400);
        sce_espr_on(0, 26, 0, 10264, 4200, -1700, -19000, 1800);
        sce_espr_on(0, 26, 0, 10264, 5600, -1700, -19000, 3800);
        sleep(10, 2);
        sce_espr_on(0, 26, 0, 10264, 4400, -1700, -18400, 4600);
        sce_espr_on(0, 26, 0, 10264, 2600, -1700, -17500, 6300);
        sleep(10, 2);
        sce_espr_on(0, 26, 0, 10264, 4400, -1700, -18400, 4600);
        sce_espr_on(0, 26, 0, 10264, 2600, -1700, -17500, 6300);
        sleep(10, 2);
        sce_espr_on(0, 26, 0, 6096, 5600, -3100, -23100, 0);
        sce_espr_on(0, 26, 0, 5496, 4500, -4000, -23100, 501);
        evt_next();
        sce_espr_on(0, 26, 0, 5596, 3800, -3300, -20400, -2300);
        return 0;
    }
}
