.version 2
init
{
    init_00()
    {
        door_aot_se(0, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -1291, 12945, 4300, 1800, -19503, -1800, -26477, 3112, 3, 7, 5, 1, 21, 3, 0, 0, UNLOCKED, 0);
        door_aot_se(1, SCE_DOOR, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -12491, -345, 1160, 2400, -9093, -1800, -857, 2064, 3, 10, 8, 1, 28, 1, 0, 0, UNLOCKED, 0);
        aot_set(12, SCE_SAVE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -8700, -1985, 1300, 1800, 7, 0, 0, 0, 0, 0);
        aot_set(10, SCE_STATUS, SAT_PL | SAT_MANUAL | SAT_UNDER, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        obj_model_set(0, 1, 130, 4, 4, 1, 4, 10, 26, -9800, -1320, -3700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        obj_model_set(1, 0, 0, 0, 0, 0, 0, 10, 0, 0, -20000, 0, 0, 0, -1024, 0, 0, 0, 0, 0, 0, 0, 0);
        obj_model_set(2, 0, 0, 0, 0, 0, 0, 10, 0, 20000, 20000, 20000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        obj_model_set(3, 0, 0, 0, 0, 1, 0, 10, 16, -6067, -1800, 2410, 0, -640, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        obj_model_set(4, 0, 0, 0, 0, 1, 0, 10, 16, -5117, -1800, 2410, 0, -1728, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        item_aot_set(7, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -6567, 1910, 1000, 1000, ITEM_HERBG, 1, 149, 3, 1);
        item_aot_set(8, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -5617, 1910, 1000, 1000, ITEM_HERBG, 1, 150, 4, 1);
        obj_model_set(5, 0, 0, 0, 0, 1, 0, 10, 16, -7017, -2450, -990, 0, -3776, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (game.player == 0)
        {
            item_aot_set(9, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -7400, -1890, 1300, 1700, ITEM_SHOTGUNAMMO, 7, 185, 5, 0);
        }
        else
        {
            item_aot_set(9, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -7400, -1890, 1300, 1700, ITEM_FLAMEROUNDS, 6, 185, 5, 0);
        }
        if (game.difficult == 1)
        {
            obj_model_set(7, 0, 0, 0, 0, 1, 0, 10, 16, -9650, -1500, -1835, 0, -3776, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            item_aot_set(2, SCE_ITEM, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -8000, -1285, 800, 1100, ITEM_INKRIBBON, 3, 214, 7, 0);
        }
        return 0;
    }
}

main
{
    main_00()
    {
        if (bits[4][31] == 0)
        {
            cut_chg(10);
            if (game.scenario == 0)
            {
                aot_set(6, SCE_EVENT, SAT_PL | SAT_UNDER, 1, 0, 3700, 10000, 1700, 3900, 255, 0, I_GOSUB, main_02, 0, 0);
                sce_em_set(0, 0, ENEMY_ANNETTEBIRKIN1, 0, 8, 1, 0, 0, 255, 7028, -1800, 12020, -2048, 0, 0);
            }
            else
            {
                sce_em_set(0, 0, ENEMY_ANNETTEBIRKIN1, 0, 0, 31, 0, 0, 255, 20000, 20000, 20000, 3072, 0, 0);
                aot_set(30, SCE_MESSAGE, SAT_EM | SAT_MANUAL | SAT_FRONT, 1, 0, 4463, 9997, 2000, 2000, 41, 0, 0, 0, 0, 255);
                evt_exec(255, I_GOSUB, main_09);
            }
        }
        else
        {
            if (bits[3][35] == 1)
            {
                sce_em_set(0, 0, ENEMY_ANNETTEBIRKIN1, 1, 0, 31, 0, 0, 255, 5463, -1800, 11997, 1536, 0, 0);
                bits[1][25] = 1;
                evt_exec(255, I_GOSUB, main_0D);
                aot_set(30, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, 4463, 9997, 2000, 2000, 41, 0, 0, 0, 0, 255);
            }
        }
        if (bits[1][3] == 1)
        {
            if (game.last_room == 0x407)
            {
                sce_em_set(0, 255, ENEMY_SHERRYWITHPENDANT, 0, 4, 1, 32, 0, 255, -697, -1800, 12829, 784, 0, 0);
                if (game.scenario == 1)
                {
                    work_set(WK_ENEMY, 2);
                    member_copy(16, 7);
                    var_10 &= 800;
                    member_set2(7, 16);
                }
            }
            else
            {
                sce_em_set(0, 255, ENEMY_SHERRYWITHPENDANT, 0, 4, 1, 32, 0, 255, -8414, -1800, 1465, -88, 0, 0);
                if (game.scenario == 1)
                {
                    work_set(WK_ENEMY, 2);
                    member_copy(16, 7);
                    var_10 &= 800;
                    member_set2(7, 16);
                }
            }
        }
        main_0F();
        main_1E();
        if (bits[4][30] == 0)
        {
            cut_be_set(0, 1, 0);
            cut_be_set(0, 2, 1);
            cut_be_set(3, 2, 1);
            cut_be_set(8, 1, 0);
            cut_be_set(8, 2, 0);
            cut_be_set(8, 3, 1);
            cut_be_set(8, 4, 1);
            sca_id_set(0, 0, 222);
            sca_id_set(22, 0, 254);
            sca_id_set(23, 0, 254);
            sca_id_set(26, 0, 0);
            main_1B();
        }
        else
        {
            sca_id_set(0, 0, 0);
            cut_be_set(0, 1, 1);
            cut_be_set(0, 2, 0);
            cut_be_set(3, 2, 0);
            cut_be_set(8, 1, 1);
            cut_be_set(8, 2, 1);
            cut_be_set(8, 3, 0);
            cut_be_set(8, 4, 0);
            main_1C();
            aot_reset(28, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
            aot_reset(29, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
            sca_id_set(0, 0, 0);
            sca_id_set(22, 0, 0);
            sca_id_set(23, 0, 0);
            sca_id_set(26, 128, 244);
        }
        aot_set(3, SCE_FLAG_CHG, SAT_PL | SAT_FRONT, 1, 0, 8319, 1765, 2100, 2000, 10, 0, 50, 0, 1, 0);
        aot_set(4, SCE_FLAG_CHG, SAT_PL | SAT_FRONT, 1, 0, -9640, 3290, 2100, 1500, 10, 0, 50, 0, 1, 0);
        aot_set(5, SCE_FLAG_CHG, SAT_OB | SAT_UNDER, 1, 0, -4747, 3290, 11100, 2450, 10, 0, 50, 0, 0, 0);
        aot_set(20, SCE_WATER, SAT_PL | SAT_EM | SAT_OB | SAT_UNDER, 0, 0, -6347, -2115, 16680, 3890, 172, 249, 0, 0, 0, 0);
        aot_set(21, SCE_WATER, SAT_PL | SAT_EM | SAT_OB | SAT_UNDER, 0, 0, -4647, 1585, 10910, 1990, 172, 249, 0, 0, 0, 0);
        aot_set(22, SCE_WATER, SAT_PL | SAT_EM | SAT_OB | SAT_UNDER, 0, 0, -4647, 5485, 10910, 5290, 172, 249, 0, 0, 0, 0);
        aot_set(23, SCE_WATER, SAT_PL | SAT_EM | SAT_OB | SAT_UNDER, 0, 0, -11247, 7385, 8210, 6490, 172, 249, 0, 0, 0, 0);
        evt_exec(255, I_GOSUB, main_10);
        return 0;
    }

    main_01()
    {
        if (arr[2] == 50)
        {
            evt_exec(255, I_GOSUB, main_12);
        }
        return 0;
    }

    main_02()
    {
        aot_reset(6, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        sce_bgm_control(2, 1, 0, 100, 64);
        sce_bgmtbl_set(0, 8, 4, 6164, 32768);
        game.cutscene = 1;
        bits[2][7] = 1;
        bits[4][31] = 1;
        evt_exec(255, I_GOSUB, main_03);
        evt_exec(255, I_GOSUB, main_04);
        evt_exec(255, I_GOSUB, main_05);
        while (
        {
            evt_next();
        }
        bits[2][7] = 0;
        game.cutscene = 0;
        return 0;
    }

    main_03()
    {
        sleep(10, 60);
        cut_chg(11);
        sleep(10, 2);
        xa_vol(110);
        bits[5][6] = 1;
        message_on(0, 0, 0, 0, 0);
        xa_on(0, 11);
        sleep(10, 26);
        wsleep();
        wsleeping();
        sleep(10, 25);
        message_on(0, 1, 0, 0, 0);
        xa_on(0, 12);
        sleep(10, 152);
        message_on(0, 2, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        message_on(0, 3, 0, 0, 0);
        xa_on(0, 13);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(10);
        sleep(10, 2);
        message_on(0, 4, 0, 0, 0);
        bits[5][5] = 1;
        xa_on(0, 14);
        sleep(10, 40);
        message_on(0, 5, 0, 0, 0);
        sleep(10, 92);
        message_on(0, 6, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(11);
        evt_next();
        xa_on(0, 15);
        sleep(10, 16);
        wsleep();
        wsleeping();
        sleep(10, 2);
        bits[5][5] = 1;
        message_on(0, 7, 0, 0, 0);
        xa_on(0, 16);
        sleep(10, 72);
        message_on(0, 8, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        bits[5][6] = 1;
        message_on(0, 9, 0, 0, 0);
        xa_on(0, 17);
        sleep(10, 42);
        message_on(0, 10, 0, 0, 0);
        sleep(10, 72);
        message_on(0, 11, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        bits[5][5] = 1;
        message_on(0, 12, 0, 0, 0);
        xa_on(0, 18);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(11);
        sleep(10, 2);
        bits[5][6] = 1;
        message_on(0, 13, 0, 0, 0);
        xa_on(0, 19);
        sleep(10, 32);
        message_on(0, 14, 0, 0, 0);
        wsleep();
        wsleeping();
        evt_exec(255, I_GOSUB, main_08);
        while (
        {
            evt_next();
        }
        xa_vol(120);
        sleep(10, 2);
        message_on(0, 15, 0, 0, 0);
        xa_on(0, 20);
        sleep(10, 93);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(11);
        sleep(10, 2);
        bits[5][6] = 1;
        message_on(0, 16, 0, 0, 0);
        xa_on(0, 21);
        sleep(10, 122);
        message_on(0, 17, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        bits[5][6] = 1;
        message_on(0, 18, 0, 0, 0);
        xa_on(0, 22);
        wsleep();
        wsleeping();
        sleep(10, 2);
        message_on(0, 19, 0, 0, 0);
        xa_on(0, 23);
        wsleep();
        wsleeping();
        sleep(10, 2);
        bits[5][6] = 1;
        message_on(0, 20, 0, 0, 0);
        xa_on(0, 24);
        sleep(10, 82);
        message_on(0, 21, 0, 0, 0);
        sleep(10, 82);
        message_on(0, 22, 0, 0, 0);
        sleep(10, 162);
        message_on(0, 23, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        bits[5][5] = 1;
        message_on(0, 24, 0, 0, 0);
        xa_on(0, 25);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(11);
        sleep(10, 2);
        bits[5][6] = 1;
        message_on(0, 25, 0, 0, 0);
        xa_on(0, 26);
        sleep(10, 163);
        wsleep();
        wsleeping();
        sleep(10, 2);
        message_on(0, 26, 0, 0, 0);
        xa_on(0, 27);
        sleep(10, 182);
        message_on(0, 27, 0, 0, 0);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(12);
        sleep(10, 2);
        xa_on(0, 28);
        sleep(10, 64);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(11);
        sleep(10, 2);
        message_on(0, 28, 0, 0, 0);
        xa_on(0, 29);
        wsleep();
        wsleeping();
        sleep(10, 2);
        message_on(0, 29, 0, 0, 0);
        xa_on(0, 30);
        wsleep();
        wsleeping();
        sleep(10, 120);
        cut_chg(0);
        cut_auto(1);
        bits[5][4] = 1;
        return 0;
    }

    main_04()
    {
        work_set(WK_PLAYER, 0);
        sleep(10, 20);
        plc_neck(5, 3, 0, 0, 30, 30);
        plc_dest(0, 21, 5, 0, 256);
        main_07();
        plc_dest(0, 8, 5, 3100, 11900);
        sleep(10, 20);
        bits[5][5] = 0;
        plc_dest(0, 21, 5, 0, 128);
        main_07();
        main_07();
        sleep(10, 20);
        plc_neck(1, 10000, -4800, 12000, 30, 30);
        sleep(10, 40);
        plc_neck(5, 3, 0, 0, 4, 4);
        plc_motion(0, 19, 1);
        sleep(10, 10);
        plc_neck(2, 0, 20, -90, 4, 4);
        sleep(10, 20);
        plc_motion(0, 19, 129);
        plc_neck(2, 0, -40, 30, 20, 20);
        sleep(10, 30);
        for 2 times
        {
            plc_neck(2, 0, 80, 0, 4, 4);
            sleep(10, 20);
            plc_neck(2, 0, -80, 0, 4, 4);
            sleep(10, 20);
        }
        plc_neck(5, 3, 0, 0, 8, 8);
        main_07();
        plc_neck(2, 0, 0, 30, 8, 8);
        sleep(10, 10);
        plc_motion(0, 19, 17);
        sleep(10, 20);
        plc_motion(0, 19, 145);
        plc_cnt(20);
        plc_neck(2, 0, -200, 0, 8, 8);
        sleep(10, 20);
        plc_neck(2, 0, 200, 0, 10, 10);
        plc_motion(0, 19, 1);
        sleep(10, 20);
        plc_motion(0, 19, 129);
        plc_cnt(10);
        plc_neck(5, 3, 0, 0, 8, 8);
        sleep(10, 20);
        plc_motion(0, 21, 17);
        sleep(10, 20);
        plc_motion(0, 21, 145);
        plc_cnt(20);
        sleep(10, 20);
        main_07();
        plc_neck(2, 0, -30, -40, 8, 8);
        sleep(10, 15);
        plc_neck(5, 3, 0, 0, 8, 8);
        while (
        {
            evt_next();
        }
        sleep(10, 20);
        plc_neck(1, 10000, -4800, 12000, 8, 8);
        sleep(10, 40);
        plc_neck(5, 3, 0, 0, 6, 6);
        while (
        {
            evt_next();
        }
        plc_neck(2, 0, 120, 120, 8, 8);
        sleep(10, 10);
        plc_neck(2, 0, 60, 60, 8, 8);
        plc_motion(0, 19, 1);
        sleep(10, 20);
        plc_motion(0, 19, 129);
        plc_cnt(10);
        for 2 times
        {
            plc_neck(2, 0, 40, 0, 8, 8);
            sleep(10, 13);
            plc_neck(2, 0, -30, 0, 8, 8);
            sleep(10, 12);
        }
        plc_motion(2, 2, 5);
        main_07();
        plc_motion(0, 19, 1);
        for 2 times
        {
            plc_neck(2, 0, 40, 10, 8, 8);
            sleep(10, 8);
            plc_neck(2, 0, -40, 10, 8, 8);
            sleep(10, 7);
        }
        plc_motion(0, 19, 129);
        while (
        {
            evt_next();
        }
        plc_motion(2, 2, 5);
        while (
        {
            evt_next();
        }
        while (
        {
            evt_next();
        }
        sleep(10, 45);
        bits[5][5] = 0;
        plc_dest(0, 9, 5, 3100, 20000);
        while (
        {
            evt_next();
        }
        plc_motion(0, 19, 2);
        while (
        {
            evt_next();
        }
        plc_ret();
        return 0;
    }

    main_05()
    {
        work_set(WK_ENEMY, 0);
        plc_motion(0, 33, 0);
        sleep(10, 8);
        se_on(2, 269, 3, 0, 0, 0);
        sleep(10, 2);
        plc_motion(10, 34, 0);
        sleep(10, 9);
        se_on(2, 285, 3, 0, 0, 0);
        sleep(10, 8);
        plc_motion(0, 33, 0);
        plc_cnt(16);
        sleep(10, 20);
        plc_motion(0, 35, 20);
        main_06();
        plc_neck(2, 0, 100, 100, 4, 4);
        sleep(10, 10);
        plc_neck(2, 0, 50, 0, 4, 4);
        sleep(10, 16);
        sleep(10, 25);
        plc_neck(2, 0, 0, -100, 4, 4);
        sleep(10, 16);
        plc_neck(2, 0, 0, 50, 4, 4);
        sleep(10, 16);
        plc_neck(2, 0, 80, 0, 4, 4);
        sleep(10, 20);
        plc_neck(2, 0, -80, 0, 4, 4);
        sleep(10, 20);
        plc_motion(0, 28, 1);
        plc_neck(2, 0, 80, 0, 4, 4);
        sleep(10, 20);
        plc_neck(2, 0, -80, 0, 4, 4);
        sleep(10, 20);
        plc_motion(0, 28, 193);
        for 2 times
        {
            plc_neck(2, 0, 80, 0, 4, 4);
            sleep(10, 20);
            plc_neck(2, 0, -80, 0, 4, 4);
            sleep(10, 20);
        }
        sleep(10, 20);
        plc_motion(0, 31, 1);
        sleep(10, 20);
        plc_neck(5, 1, 0, 0, 6, 6);
        sleep(10, 14);
        plc_motion(0, 31, 193);
        sleep(10, 30);
        plc_motion(0, 35, 21);
        sleep(10, 10);
        for 2 times
        {
            plc_neck(2, 0, 30, 10, 3, 3);
            sleep(10, 12);
            plc_neck(2, 0, -50, 10, 3, 3);
            sleep(10, 12);
        }
        sleep(10, 30);
        plc_motion(0, 28, 1);
        for 2 times
        {
            plc_neck(2, 0, 40, 10, 4, 4);
            sleep(10, 12);
            plc_neck(2, 0, -40, 10, 4, 4);
            sleep(10, 12);
        }
        plc_motion(0, 28, 193);
        plc_neck(5, 1, 0, 0, 6, 6);
        while (
        {
            evt_next();
        }
        plc_motion(0, 35, 21);
        while (
        {
            evt_next();
        }
        main_06();
        plc_motion(0, 31, 1);
        for 3 times
        {
            plc_neck(2, 0, 200, 0, 4, 20);
            sleep(10, 10);
            plc_neck(2, 0, -200, 0, 4, 20);
            sleep(10, 10);
        }
        plc_motion(0, 31, 193);
        plc_neck(2, 0, 200, 0, 4, 20);
        sleep(10, 10);
        plc_neck(2, 0, -200, 0, 4, 20);
        sleep(10, 10);
        plc_neck(5, 1, 0, 0, 20, 20);
        sleep(10, 20);
        sleep(10, 40);
        plc_cnt(10);
        plc_motion(0, 33, 192);
        sleep(10, 20);
        plc_motion(0, 23, 64);
        main_06();
        plc_neck(2, 0, 0, -100, 4, 4);
        sleep(10, 16);
        plc_neck(2, 0, 0, 0, 4, 4);
        sleep(10, 14);
        plc_motion(0, 19, 1);
        sleep(10, 15);
        plc_neck(2, 0, 80, 30, 4, 2);
        plc_motion(0, 19, 209);
        plc_cnt(15);
        sleep(10, 20);
        plc_neck(2, 0, -60, 30, 4, 2);
        sleep(10, 10);
        plc_motion(0, 22, 1);
        sleep(10, 10);
        plc_neck(2, 0, 80, 30, 4, 2);
        sleep(10, 10);
        plc_motion(0, 22, 193);
        plc_cnt(10);
        sleep(10, 10);
        plc_neck(2, 0, -60, 30, 4, 2);
        sleep(10, 20);
        plc_motion(0, 21, 81);
        sleep(10, 18);
        plc_motion(0, 21, 193);
        plc_cnt(16);
        sleep(10, 30);
        while (
        {
            evt_next();
        }
        main_06();
        plc_motion(0, 19, 17);
        plc_neck(2, 0, -20, -5, 4, 2);
        sleep(10, 30);
        plc_neck(2, 0, 20, -5, 4, 2);
        sleep(10, 30);
        plc_motion(0, 19, 209);
        plc_neck(2, 0, -20, -5, 4, 2);
        sleep(10, 30);
        plc_neck(2, 0, 20, -5, 4, 2);
        sleep(10, 30);
        plc_motion(0, 22, 1);
        plc_neck(2, 0, -80, -5, 4, 2);
        sleep(10, 20);
        plc_neck(2, 0, 80, -5, 4, 2);
        sleep(10, 5);
        plc_motion(0, 22, 193);
        plc_cnt(10);
        sleep(10, 15);
        plc_neck(2, 0, -80, -5, 4, 2);
        sleep(10, 20);
        plc_neck(2, 0, 80, -5, 4, 2);
        sleep(10, 20);
        main_06();
        plc_neck(2, 0, 0, -20, 4, 10);
        sleep(10, 5);
        plc_motion(0, 19, 1);
        sleep(10, 15);
        plc_motion(0, 19, 209);
        plc_cnt(15);
        sleep(10, 15);
        for 2 times
        {
            plc_neck(2, 0, 80, -30, 4, 4);
            sleep(10, 20);
            plc_neck(2, 0, -80, -30, 4, 4);
            sleep(10, 20);
        }
        main_06();
        plc_neck(5, 1, 0, 0, 10, 10);
        sleep(10, 60);
        plc_motion(0, 22, 17);
        sleep(10, 50);
        plc_motion(0, 22, 209);
        plc_cnt(10);
        sleep(10, 50);
        sleep(10, 5);
        plc_neck(2, 0, 80, -30, 4, 4);
        plc_motion(0, 19, 1);
        sleep(10, 5);
        plc_neck(2, 0, -80, -30, 4, 4);
        sleep(10, 10);
        plc_motion(0, 19, 209);
        plc_cnt(15);
        sleep(10, 15);
        for 2 times
        {
            plc_neck(2, 0, 80, -30, 4, 4);
            sleep(10, 20);
            plc_neck(2, 0, -80, -30, 4, 4);
            sleep(10, 20);
        }
        sleep(10, 20);
        plc_motion(0, 19, 1);
        sleep(10, 10);
        plc_neck(2, 0, 80, 15, 4, 4);
        sleep(10, 10);
        plc_motion(0, 19, 209);
        plc_cnt(10);
        sleep(10, 20);
        for 1 times
        {
            plc_neck(2, 0, 60, 0, 6, 6);
            sleep(10, 20);
            plc_neck(2, 0, -40, 0, 5, 3);
            sleep(10, 20);
        }
        main_06();
        sleep(10, 22);
        plc_motion(0, 19, 17);
        sleep(10, 10);
        plc_neck(2, 0, 80, 30, 4, 4);
        sleep(10, 20);
        plc_motion(0, 19, 209);
        plc_cnt(15);
        sleep(10, 15);
        for 2 times
        {
            plc_neck(2, 0, 55, -10, 4, 4);
            sleep(10, 25);
            plc_neck(2, 0, -40, -30, 4, 4);
            sleep(10, 25);
        }
        sleep(10, 30);
        plc_motion(0, 19, 81);
        sleep(10, 10);
        plc_neck(2, 0, -80, -30, 4, 4);
        sleep(10, 20);
        plc_motion(0, 19, 209);
        plc_cnt(15);
        sleep(10, 15);
        plc_motion(0, 22, 17);
        sleep(10, 50);
        plc_motion(0, 22, 209);
        plc_cnt(10);
        sleep(10, 20);
        plc_motion(0, 19, 17);
        sleep(10, 10);
        plc_neck(2, 0, 80, 30, 4, 4);
        sleep(10, 20);
        plc_motion(0, 19, 209);
        plc_cnt(15);
        sleep(10, 15);
        plc_neck(5, 1, 0, 0, 10, 10);
        while (
        {
            evt_next();
        }
        plc_neck(1, 4186, -4800, 15245, 30, 10);
        sleep(10, 25);
        plc_neck(1, 4809, -4400, 9638, 30, 10);
        sleep(10, 20);
        plc_neck(1, 715, -4600, 14345, 30, 10);
        sleep(10, 15);
        while (
        {
            evt_next();
        }
        sleep(10, 40);
        plc_neck(3, 1, 0, 0, 60, 60);
        sleep(10, 50);
        bits[5][6] = 0;
        plc_dest(0, 5, 6, -200, 13000);
        sleep(10, 50);
        se_on(0, 256, 3, 0, 0, 0);
        sleep(10, 30);
        se_on(0, 257, 3, 0, 0, 0);
        pos_set(0, 20000, 20000, 20000);
        return 0;
    }

    main_06()
    {
        while (
        {
            evt_next();
        }
        bits[5][6] = 0;
        return 0;
    }

    main_07()
    {
        while (
        {
            evt_next();
        }
        bits[5][5] = 0;
        return 0;
    }

    main_08()
    {
        sleep(10, 60);
        sce_bgm_control(0, 4, 0, 100, 64);
        sce_bgm_control(2, 4, 0, 100, 64);
        sce_fade_set(2, 2, 7, 0, 2);
        sleep(10, 63);
        cut_chg(10);
        evt_next();
        sce_fade_set(2, 2, 7, 0, 254);
        movie_on(11);
        sce_fade_adjust(2, 255, 127);
        evt_next();
        sleep(10, 63);
        bits[5][7] = 1;
        sce_bgm_control(0, 3, 0, 100, 64);
        sce_bgm_control(2, 3, 0, 100, 64);
        return 0;
    }

    main_09()
    {
        game.cutscene = 1;
        bits[2][7] = 1;
        bits[4][31] = 1;
        bits[3][35] = 1;
        sce_bgm_control(2, 1, 0, 100, 64);
        sce_bgmtbl_set(0, 8, 4, 6164, 32768);
        evt_exec(255, I_GOSUB, main_0A);
        evt_exec(255, I_GOSUB, main_0B);
        evt_exec(255, I_GOSUB, main_0C);
        while (
        {
            evt_next();
        }
        cut_auto(1);
        aot_reset(30, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 41, 0, 0, 0, 0, 255);
        bits[2][7] = 0;
        game.cutscene = 0;
        return 0;
    }

    main_0A()
    {
        evt_next();
        se_on(2, 267, 0, 4837, 0, 9937);
        sleep(10, 60);
        cut_chg(9);
        bits[5][14] = 1;
        bits[5][13] = 1;
        sleep(10, 89);
        cut_chg(14);
        bits[5][13] = 1;
        sleep(10, 61);
        sleep(10, 60);
        bits[5][12] = 1;
        sleep(10, 3);
        message_on(0, 33, 0, 0, 0);
        xa_on(0, 31);
        sleep(10, 60);
        wsleep();
        wsleeping();
        bits[5][11] = 1;
        sleep(10, 2);
        cut_chg(15);
        work_set(WK_OBJECT, 0);
        member_set(13, 246, 240);
        sleep(10, 3);
        message_on(0, 34, 0, 0, 0);
        xa_on(0, 32);
        sleep(10, 10);
        bits[5][12] = 1;
        sleep(10, 120);
        wsleep();
        wsleeping();
        bits[5][10] = 1;
        sleep(10, 2);
        cut_chg(14);
        work_set(WK_OBJECT, 0);
        member_set(13, 140, 241);
        sleep(10, 3);
        message_on(0, 35, 0, 0, 0);
        xa_on(0, 33);
        wsleep();
        wsleeping();
        bits[5][11] = 1;
        sleep(10, 20);
        message_on(0, 45, 0, 0, 0);
        xa_on(0, 34);
        bits[5][10] = 1;
        wsleep();
        wsleeping();
        message_on(0, 36, 0, 0, 0);
        xa_on(0, 35);
        wsleep();
        wsleeping();
        sleep(10, 2);
        cut_chg(15);
        work_set(WK_OBJECT, 0);
        member_set(13, 246, 240);
        sleep(10, 3);
        message_on(0, 37, 0, 0, 0);
        xa_on(0, 36);
        sleep(10, 120);
        wsleep();
        wsleeping();
        bits[5][11] = 1;
        sleep(10, 2);
        message_on(0, 38, 0, 0, 0);
        xa_on(0, 37);
        wsleep();
        wsleeping();
        sleep(10, 2);
        sleep(10, 40);
        cut_chg(14);
        work_set(WK_OBJECT, 0);
        member_set(13, 140, 241);
        sleep(10, 2);
        message_on(0, 39, 0, 0, 0);
        xa_on(0, 38);
        wsleep();
        wsleeping();
        bits[5][10] = 1;
        sleep(10, 2);
        while (
        {
            evt_next();
        }
        sleep(10, 80);
        message_on(0, 40, 0, 0, 0);
        xa_on(0, 39);
        sleep(10, 60);
        wsleep();
        wsleeping();
        bits[5][11] = 1;
        cut_chg(0);
        cut_auto(1);
        bits[5][4] = 1;
        return 0;
    }

    main_0B()
    {
        work_set(WK_PLAYER, 0);
        pos_set(0, 828, -1800, 12000);
        plc_neck(1, 4635, -1800, 9636, 40, 40);
        sleep(10, 20);
        plc_dest(0, 21, 5, 0, 128);
        while (
        {
            evt_next();
        }
        bits[5][5] = 0;
        plc_neck(5, 3, 0, 0, 20, 20);
        plc_dest(0, 5, 5, 3050, 12000);
        while (
        {
            evt_next();
        }
        bits[5][5] = 0;
        while (
        {
            evt_next();
        }
        bits[5][13] = 0;
        pos_set(0, 1677, -1800, 12130);
        while (
        {
            evt_next();
        }
        bits[5][13] = 0;
        pos_set(0, 3050, -1800, 12130);
        while (
        {
            evt_next();
        }
        bits[5][12] = 0;
        plc_neck(5, 3, 0, 0, 20, 20);
        plc_motion(0, 22, 17);
        sleep(10, 20);
        plc_motion(0, 22, 193);
        plc_cnt(15);
        sleep(10, 20);
        plc_motion(1, 6, 16);
        while (
        {
            evt_next();
        }
        bits[5][12] = 0;
        plc_flg(1, 192);
        plc_cnt(13);
        while (
        {
            evt_next();
        }
        bits[5][10] = 0;
        sleep(10, 20);
        plc_neck(1, 10000, -2100, 12000, 30, 30);
        sleep(10, 40);
        plc_neck(5, 3, 0, 0, 20, 20);
        plc_motion(0, 19, 1);
        sleep(10, 10);
        plc_neck(2, 0, 20, 230, 20, 20);
        sleep(10, 20);
        plc_motion(0, 19, 129);
        plc_neck(2, 0, 40, 160, 20, 20);
        sleep(10, 30);
        for 2 times
        {
            plc_neck(2, 0, 80, 230, 4, 4);
            sleep(10, 20);
            plc_neck(2, 0, -80, 230, 4, 4);
            sleep(10, 20);
        }
        plc_neck(5, 3, 0, 0, 30, 30);
        while (
        {
            evt_next();
        }
        bits[5][10] = 0;
        plc_neck(2, 0, 0, 160, 20, 20);
        sleep(10, 30);
        plc_neck(2, 0, -200, 230, 20, 20);
        sleep(10, 20);
        plc_neck(2, 0, -200, 230, 10, 10);
        plc_motion(0, 19, 1);
        sleep(10, 20);
        plc_motion(0, 19, 129);
        plc_cnt(10);
        plc_neck(5, 3, 0, 0, 20, 20);
        sleep(10, 20);
        plc_motion(0, 21, 17);
        sleep(10, 20);
        plc_motion(0, 21, 145);
        plc_cnt(20);
        sleep(10, 20);
        while (
        {
            evt_next();
        }
        bits[5][15] = 0;
        plc_dest(0, 4, 15, 3600, 12172);
        while (
        {
            evt_next();
        }
        plc_motion(1, 6, 1);
        sleep(10, 20);
        sleep(10, 80);
        plc_neck(2, 0, -20, 0, 4, 4);
        sleep(10, 100);
        while (
        {
            evt_next();
        }
        plc_motion(1, 6, 128);
        sleep(10, 20);
        plc_ret();
        return 0;
    }

    main_0C()
    {
        work_set(WK_ENEMY, 0);
        while (
        {
            evt_next();
        }
        pos_set(0, 5140, -1800, 10665);
        plc_motion(10, 27, 80);
        sleep(10, 10);
        se_on(2, 268, 3, 0, 0, 0);
        sleep(10, 50);
        sleep(10, 8);
        sleep(10, 8);
        sleep(10, 16);
        for 8 times
        {
            member_copy(16, 15);
            var_10 -= 80;
            member_set2(15, 16);
            evt_next();
        }
        sleep(10, 5);
        se_on(2, 285, 3, 0, 0, 0);
        sleep(10, 3);
        sleep(10, 16);
        sleep(10, 16);
        plc_motion(0, 24, 20);
        sleep(10, 20);
        plc_neck(5, 1, 0, 0, 40, 40);
        while (
        {
            evt_next();
        }
        bits[5][11] = 0;
        sleep(10, 40);
        plc_neck(4, 2, 0, 0, 40, 40);
        sleep(10, 180);
        plc_neck(2, 0, 80, 200, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, -80, 200, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, 0, 200, 30, 30);
        while (
        {
            evt_next();
        }
        bits[5][11] = 0;
        plc_neck(5, 1, 0, 0, 60, 60);
        sleep(10, 20);
        plc_neck(2, 0, 80, -200, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, -80, -200, 30, 30);
        sleep(10, 10);
        plc_neck(5, 1, 0, 0, 40, 40);
        while (
        {
            evt_next();
        }
        bits[5][11] = 0;
        plc_neck(2, 0, 80, 200, 4, 4);
        sleep(10, 80);
        plc_neck(2, 0, -80, 200, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, 80, 200, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, -80, 200, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, 0, 200, 30, 30);
        sleep(10, 30);
        sleep(10, 80);
        plc_neck(2, 0, -80, 250, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, 80, 250, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, -80, 250, 30, 30);
        sleep(10, 10);
        plc_neck(2, 0, 0, 250, 30, 30);
        sleep(10, 60);
        plc_motion(0, 25, 1);
        sleep(10, 26);
        plc_motion(0, 36, 0);
        plc_cnt(6);
        sleep(10, 3);
        for 16 times
        {
            member_copy(16, 15);
            var_10 -= 20;
            member_set2(15, 16);
            evt_next();
        }
        member_copy(16, 0);
        var_10 |= 04;
        member_set2(0, 16);
        return 0;
    }

    main_0D()
    {
        evt_next();
        work_set(WK_ENEMY, 0);
        plc_motion(0, 36, 64);
        plc_cnt(117);
        member_copy(16, 0);
        var_10 |= 04;
        member_set2(0, 16);
        bits[1][25] = 1;
        return 0;
    }

    main_0E()
    {
        work_set(WK_ENEMY, 0);
        for 5 times
        {
            member_copy(16, 11);
            var_10 -= 40;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3D;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 58;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 42;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3F;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3C;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3B;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3B;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3F;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 45;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 40;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 42;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 38;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 40;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3A;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3E;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3D;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 39;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 37;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 37;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 38;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 38;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3C;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3C;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3A;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 31;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 31;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 36;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 38;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3D;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 39;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 3A;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 2E;
            member_set2(11, 16);
            evt_next();
            member_copy(16, 11);
            var_10 -= 34;
            member_set2(11, 16);
            evt_next();
        }
        return 0;
    }

    main_0F()
    {
        aot_set(24, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, 8209, 5565, 2000, 5300, 30, 0, 0, 0, 0, 255);
        aot_set(25, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -9091, 4865, 2500, 2300, 30, 0, 0, 0, 0, 255);
        aot_set(26, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, 8119, 1765, 2100, 2000, 31, 0, 0, 0, 0, 255);
        aot_set(27, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -9640, 3290, 2100, 1500, 31, 0, 0, 0, 0, 255);
        aot_set(28, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, 4259, 3525, 2100, 1980, 32, 0, 0, 0, 0, 255);
        aot_set(29, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -4061, 3525, 2100, 1980, 32, 0, 0, 0, 0, 255);
        return 0;
    }

    main_10()
    {

off_3EFA:
        evt_next();
        sce_bgm_control(0, 0, 1, 71, 64);
        sce_bgm_control(0, 0, 2, 1, 64);
        sce_bgm_control(0, 0, 3, 1, 64);
        do
        {
            evt_next();
        } while (bits[1][11] == 0);
        goto off_3EFA;
        return 0;
    }

    main_11()
    {
        cut_chg(4);
        sleep(10, 60);
        cut_old();
        cut_auto(1);
        return 0;
    }

    main_12()
    {
        bits[2][7] = 1;
        game.cutscene = 1;
        work_set(WK_PLAYER, 0);
        if (&9 == 3)
        {
            bits[5][1] = 1;
        }
        else
        {
            bits[5][1] = 0;
        }
        aot_reset(3, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        aot_reset(4, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        evt_exec(255, I_GOSUB, main_13);
        sleep(10, 100);
        if (bits[4][30] == 0)
        {
            evt_exec(255, I_GOSUB, main_1A);
        }
        else
        {
            evt_exec(255, I_GOSUB, main_19);
        }
        cut_chg(13);
        if (game.player == 1)
        {
            if (bits[3][35] == 1)
            {
                work_set(WK_ENEMY, 0);
                pos_set(0, 5363, -1800, 13097);
            }
        }
        bits[1][28] = 1;
        sleep(10, 8);
        bits[1][28] = 0;
        while (
        {
            sleep(10, 1);
        }
        if (bits[4][30] == 0)
        {
            bits[4][30] = 1;
            cut_be_set(0, 1, 1);
            cut_be_set(0, 2, 0);
            cut_be_set(3, 2, 0);
            cut_be_set(8, 1, 1);
            cut_be_set(8, 2, 1);
            cut_be_set(8, 3, 0);
            cut_be_set(8, 4, 0);
            sca_id_set(0, 0, 0);
            sca_id_set(22, 0, 0);
            sca_id_set(23, 0, 0);
            sca_id_set(26, 128, 244);
            if (bits[5][1] == 1)
            {
                cut_chg(1);
            }
            else
            {
                cut_chg(3);
            }
            if (game.scenario == 1)
            {
                if (bits[3][35] == 1)
                {
                    work_set(WK_ENEMY, 0);
                    pos_set(0, 5463, -1800, 11997);
                }
            }
            bits[1][28] = 1;
            sleep(10, 8);
            bits[1][28] = 0;
            sleep(10, 20);
            aot_reset(28, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
            aot_reset(29, SCE_AUTO, SAT_AUTO, 0, 0, 0, 0, 0, 0);
        }
        else
        {
            bits[4][30] = 0;
            cut_be_set(0, 1, 0);
            cut_be_set(0, 2, 1);
            cut_be_set(3, 2, 1);
            cut_be_set(8, 1, 0);
            cut_be_set(8, 2, 0);
            cut_be_set(8, 3, 1);
            cut_be_set(8, 4, 1);
            sca_id_set(0, 0, 222);
            sca_id_set(22, 0, 254);
            sca_id_set(23, 0, 254);
            sca_id_set(26, 0, 0);
            cut_chg(4);
            bits[1][28] = 1;
            sleep(10, 8);
            bits[1][28] = 0;
            sleep(10, 20);
            if (bits[5][1] == 1)
            {
                cut_chg(5);
            }
            else
            {
                cut_chg(7);
            }
            if (game.scenario == 1)
            {
                if (bits[3][35] == 1)
                {
                    work_set(WK_ENEMY, 0);
                    pos_set(0, 5463, -1800, 11997);
                }
            }
            aot_reset(28, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 32, 0, 0, 0, 0, 255);
            aot_reset(29, SCE_MESSAGE, SAT_PL | SAT_MANUAL | SAT_FRONT, 32, 0, 0, 0, 0, 255);
        }
        cut_auto(1);
        aot_reset(3, SCE_FLAG_CHG, SAT_PL | SAT_FRONT, 10, 0, 50, 0, 1, 0);
        aot_reset(4, SCE_FLAG_CHG, SAT_PL | SAT_FRONT, 10, 0, 50, 0, 1, 0);
        sleep(10, 30);
        bits[2][7] = 0;
        game.cutscene = 0;
        aot_on(10);
        evt_next();
        bits[5][3] = 1;
        return 0;
    }

    main_13()
    {
        work_set(WK_PLAYER, 0);
        bits[5][2] = 0;
        evt_exec(255, I_GOSUB, main_14);
        bits[5][3] = 0;
        nop_8c(0, 90, 110, 12, 0, 80, 0);
        if (bits[5][1] == 1)
        {
            evt_exec(255, I_GOSUB, main_15);
        }
        else
        {
            evt_exec(255, I_GOSUB, main_16);
        }
        sleep(10, 10);
        sleep(10, 10);
        do
        {
            evt_next();
        } while (bits[5][2] == 0);
        return 0;
    }

    main_14()
    {
        work_set(WK_PLAYER, 0);
        if (game.player == 1)
        {
            if (bits[5][1] == 1)
            {
                pos_set(0, 7634, -1800, 3029);
                member_set(15, 0, 0);
            }
            else
            {
                pos_set(0, -7004, -1800, 3595);
                member_set(15, 0, 8);
            }
        }
        else
        {
            if (bits[5][1] == 1)
            {
                pos_set(0, 7216, -1800, 2979);
                member_set(15, 0, 0);
            }
            else
            {
                pos_set(0, -6586, -1800, 3555);
                member_set(15, 0, 8);
            }
        }
        sleep(10, 20);
        if (game.player == 1)
        {
            plc_motion(0, 15, 0);
        }
        else
        {
            plc_motion(0, 15, 1);
        }
        sleep(10, 30);
        if (game.player == 1)
        {
            plc_motion(0, 16, 0);
        }
        else
        {
            plc_motion(0, 16, 1);
        }
        sleep(10, 28);
        se_on(2, 266, 1, 0, 0, 0);
        sleep(10, 22);
        sleep(10, 12);
        plc_cnt(50);
        plc_motion(0, 16, 192);
        sleep(10, 50);
        plc_cnt(30);
        plc_motion(0, 15, 192);
        sleep(10, 30);
        bits[5][2] = 1;
        plc_ret();
        return 0;
    }

    main_15()
    {
        work_set(WK_OBJECT, 1);
        pos_set(0, 8514, -3600, 3024);
        member_set(16, 0, 252);
        sleep(10, 20);
        sleep(10, 30);
        speed_set(3, 0);
        speed_set(9, 1);
        for 10 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(3, 10);
        speed_set(9, 1);
        for 5 times
        {
            add_speed();
            evt_next();
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, 2);
        for 23 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, -10);
        for 5 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        for 1 times
        {
            sleep(10, 17);
            speed_set(3, 32);
            speed_set(9, 2);
            for 10 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
            speed_set(9, -8);
            for 4 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
        }
        while (
        {
            evt_next();
        }
        pos_set(0, 0, -20000, 0);
        return 0;
    }

    main_16()
    {
        work_set(WK_OBJECT, 1);
        pos_set(0, -7884, -3600, 3600);
        member_set(14, 0, 0);
        member_set(15, 0, 0);
        member_set(16, 0, 4);
        sleep(10, 20);
        sleep(10, 30);
        speed_set(3, 0);
        speed_set(9, -1);
        for 10 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(3, -10);
        speed_set(9, -1);
        for 5 times
        {
            add_speed();
            evt_next();
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, -2);
        for 23 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        speed_set(9, 10);
        for 5 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        for 1 times
        {
            sleep(10, 17);
            speed_set(3, -32);
            speed_set(9, -2);
            for 10 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
            speed_set(9, 8);
            for 4 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
        }
        while (
        {
            evt_next();
        }
        pos_set(0, 0, -20000, 0);
        return 0;
    }

    main_17()
    {
        if (arr[26] == 2)
        {
            evt_exec(255, I_GOSUB, main_18);
        }
        do
        {
            evt_next();
        } while (bits[1][11] == 0);
        goto off_436A;
        return 0;
    }

    main_18()
    {

off_438E:
        save(4, 6000);
        for 20 times
        {
            work_copy(4, 2, 1);
            light_kido_set(0, 0);
            copy(16, 4);
            var_10 += 64;
            copy(4, 16);
        }
        for 20 times
        {
            work_copy(4, 2, 1);
            light_kido_set(0, 0);
            copy(16, 4);
            var_10 -= 64;
            copy(4, 16);
        }
        if (arr[26] == 2)
        {
            goto off_438E;
        }
        return 0;
    }

    main_19()
    {
        work_set(WK_OBJECT, 2);
        pos_set(0, 900, -1800, 4500);
        dir_set(0, 0, -1024, 0);
        se_on(2, 15, 0, 1100, -9000, 4700);
        nop_8c(0, 170, 130, 16, 0, 0, 0);
        speed_set(1, -25);
        for 16 times
        {
            add_speed();
            evt_next();
        }
        speed_set(4, -3);
        nop_8c(0, 120, 140, 8, 0, 0, 0);
        nop_8c(0, 140, 120, 8, 0, 8, 0);
        nop_8c(0, 120, 140, 8, 0, 16, 0);
        nop_8c(0, 140, 120, 8, 0, 24, 0);
        nop_8c(0, 120, 140, 8, 0, 32, 0);
        nop_8c(0, 140, 120, 8, 0, 40, 0);
        nop_8c(0, 120, 140, 8, 0, 48, 0);
        nop_8c(0, 140, 120, 8, 0, 56, 0);
        nop_8c(0, 120, 140, 8, 0, 64, 0);
        nop_8c(0, 140, 120, 8, 0, 72, 0);
        nop_8c(0, 120, 140, 8, 0, 80, 0);
        nop_8c(0, 140, 120, 8, 0, 88, 0);
        nop_8c(0, 120, 140, 8, 0, 96, 0);
        nop_8c(0, 140, 120, 8, 0, 104, 0);
        nop_8c(0, 120, 140, 8, 0, 112, 0);
        nop_8c(0, 140, 120, 8, 0, 120, 0);
        nop_8c(0, 120, 140, 8, 0, 128, 0);
        nop_8c(0, 140, 120, 8, 0, 136, 0);
        nop_8c(0, 120, 140, 8, 0, 144, 0);
        nop_8c(0, 140, 120, 8, 0, 152, 0);
        for 20 times
        {
            speed_set(10, -1);
            for 2 times
            {
                add_speed();
                add_aspeed();
                evt_next();
                add_speed();
                evt_next();
            }
            speed_set(10, 1);
            for 2 times
            {
                add_speed();
                add_aspeed();
                evt_next();
                add_speed();
                evt_next();
            }
        }
        speed_set(4, 0);
        bits[5][31] = 1;
        nop_8c(0, 160, 200, 2, 0, 0, 0);
        nop_8c(0, 200, 160, 4, 0, 2, 0);
        main_1B();
        evt_next();
        bits[5][31] = 0;
        se_on(2, 270, 0, 900, -9000, 4500);
        pos_set(0, 20000, 20000, 20000);
        return 0;
    }

    main_1A()
    {
        work_set(WK_OBJECT, 2);
        se_on(2, 15, 0, 1100, -9000, 4700);
        pos_set(0, 900, -9000, 4500);
        dir_set(0, 0, -2048, 0);
        speed_set(1, 25);
        nop_8c(0, 170, 130, 16, 0, 0, 0);
        for 16 times
        {
            add_speed();
            evt_next();
        }
        speed_set(4, 3);
        nop_8c(0, 120, 140, 8, 0, 0, 0);
        nop_8c(0, 140, 120, 8, 0, 8, 0);
        nop_8c(0, 120, 140, 8, 0, 16, 0);
        nop_8c(0, 140, 120, 8, 0, 24, 0);
        nop_8c(0, 120, 140, 8, 0, 32, 0);
        nop_8c(0, 140, 120, 8, 0, 40, 0);
        nop_8c(0, 120, 140, 8, 0, 48, 0);
        nop_8c(0, 140, 120, 8, 0, 56, 0);
        nop_8c(0, 120, 140, 8, 0, 64, 0);
        nop_8c(0, 140, 120, 8, 0, 72, 0);
        nop_8c(0, 120, 140, 8, 0, 80, 0);
        nop_8c(0, 140, 120, 8, 0, 88, 0);
        nop_8c(0, 120, 140, 8, 0, 96, 0);
        nop_8c(0, 140, 120, 8, 0, 104, 0);
        nop_8c(0, 120, 140, 8, 0, 112, 0);
        nop_8c(0, 140, 120, 8, 0, 120, 0);
        nop_8c(0, 120, 140, 8, 0, 128, 0);
        nop_8c(0, 140, 120, 8, 0, 136, 0);
        nop_8c(0, 120, 140, 8, 0, 144, 0);
        nop_8c(0, 140, 120, 8, 0, 152, 0);
        for 20 times
        {
            speed_set(10, 1);
            for 2 times
            {
                add_speed();
                add_aspeed();
                evt_next();
                add_speed();
                evt_next();
            }
            speed_set(10, -1);
            for 2 times
            {
                add_speed();
                add_aspeed();
                evt_next();
                add_speed();
                evt_next();
            }
        }
        speed_set(4, 0);
        bits[5][31] = 1;
        nop_8c(0, 160, 220, 2, 0, 0, 0);
        nop_8c(0, 220, 140, 10, 0, 2, 0);
        main_1C();
        evt_next();
        bits[5][31] = 0;
        se_on(2, 272, 0, 900, -1800, 4500);
        sce_espr_on(0, 26, 0, 8192, 4800, -1800, 5200, 2048);
        sce_espr_on(0, 26, 0, 8192, 4800, -1800, 3600, 0);
        sce_espr_on(0, 26, 0, 8192, 3800, -1800, 5200, 2048);
        sce_espr_on(0, 26, 0, 8192, 3800, -1800, 3600, 0);
        sce_espr_on(0, 26, 0, 8192, 2800, -1800, 5200, 2048);
        sce_espr_on(0, 26, 0, 8192, 2800, -1800, 3600, 0);
        sce_espr_on(0, 26, 0, 8192, 1800, -1800, 5200, 2048);
        sce_espr_on(0, 26, 0, 8192, 1800, -1800, 3600, 0);
        sce_espr_on(0, 26, 0, 8192, 800, -1800, 5200, 2048);
        sce_espr_on(0, 26, 0, 8192, 800, -1800, 3600, 0);
        sce_espr_on(0, 26, 0, 8192, -200, -1800, 5200, 2048);
        sce_espr_on(0, 26, 0, 8192, -200, -1800, 3600, 0);
        sce_espr_on(0, 26, 0, 8192, -1200, -1800, 5200, 2048);
        sce_espr_on(0, 26, 0, 8192, -1200, -1800, 3600, 0);
        sce_espr_on(0, 26, 0, 8192, -2200, -1800, 5200, 2048);
        sce_espr_on(0, 26, 0, 8192, -2200, -1800, 3600, 0);
        evt_exec(255, I_GOSUB, main_1D);
        pos_set(0, 20000, 20000, 20000);
        return 0;
    }

    main_1B()
    {
        if (bits[5][9] == 1)
        {
            sce_espr_kill(22, 20, 0, 0);
            evt_next();
        }
        bits[5][9] = 1;
        sce_espr3d_on(0, 1046, 0, 4096, 9000, -4700, 3200, 0, 3072, 0, 0);
        sce_espr3d_on(0, 1046, 0, 4096, -8600, -4700, 3900, 0, 1024, 0, 0);
        return 0;
    }

    main_1C()
    {
        if (bits[5][9] == 1)
        {
            sce_espr_kill(22, 4, 0, 0);
            evt_next();
        }
        bits[5][9] = 1;
        sce_espr3d_on(0, 5142, 0, 4096, 9000, -4700, 3200, 0, 3072, 0, 0);
        sce_espr3d_on(0, 5142, 0, 4096, -8600, -4700, 3900, 0, 1024, 0, 0);
        return 0;
    }

    main_1D()
    {
        work_set(WK_OBJECT, 0);
        speed_set(1, 0);
        speed_set(7, 1);
        for 5 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        for 10 times
        {
            speed_set(7, -1);
            for 10 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
            speed_set(7, 1);
            for 10 times
            {
                add_speed();
                add_aspeed();
                evt_next();
            }
        }
        speed_set(7, -1);
        for 10 times
        {
            add_speed();
            add_aspeed();
            evt_next();
        }
        member_set(12, 216, 250);
        return 0;
    }

    main_1E()
    {
        obj_model_set(6, 0, 0, 0, 0, 1, 0, 10, 16, -1809, -1800, 12199, 0, 896, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aot_set(11, SCE_EVENT, SAT_PL | SAT_MANUAL | SAT_FRONT, 1, 0, -2099, 11169, 770, 2060, 255, 0, I_GOSUB, main_1F, 0, 0);
        return 0;
    }

    main_1F()
    {
        bits[2][7] = 1;
        bits[2][2] = 1;
        bits[2][1] = 1;
        bits[2][0] = 1;
        message_on(0, 42, 0, 0, 255);
        evt_next();
        if (input.question == 0)
        {
            se_on(4, 6, 0, 0, 0, 0);
            main_20();
        }
        else
        {
            se_on(4, 5, 0, 0, 0, 0);
        }
        bits[2][0] = 0;
        bits[2][2] = 0;
        bits[2][1] = 0;
        bits[2][7] = 0;
        return 0;
    }

    main_20()
    {
        if ()
        {
            poison_ck();
            message_on(0, 44, 0, 0, 255);
            evt_next();
            poison_clr();
        }
        else
        {
            message_on(0, 43, 0, 0, 255);
            evt_next();
        }
        return 0;
    }
}
